/*! For license information please see swiper.js.LICENSE.txt */
"use strict";(self.webpackChunkwebpack_example=self.webpackChunkwebpack_example||[]).push([["swiper"],{"./node_modules/swiper/modules/a11y.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/classes-to-selector.mjs"),r=s("./node_modules/swiper/shared/utils.mjs");function l(e){let{swiper:t,extendParams:s,on:l}=e;s({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,containerRole:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null,scrollOnFocus:!0}}),t.a11y={clicked:!1};let n,o,d=null,c=(new Date).getTime();function p(e){const t=d;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}function u(e){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function m(e){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function h(e,t){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("role",t)}))}function f(e,t){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function g(e,t){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function v(e){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function w(e){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function b(e){if(13!==e.keyCode&&32!==e.keyCode)return;const s=t.params.a11y,a=e.target;if(!t.pagination||!t.pagination.el||a!==t.pagination.el&&!t.pagination.el.contains(e.target)||e.target.matches((0,i.c)(t.params.pagination.bulletClass))){if(t.navigation&&t.navigation.prevEl&&t.navigation.nextEl){const e=(0,r.m)(t.navigation.prevEl);(0,r.m)(t.navigation.nextEl).includes(a)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?p(s.lastSlideMessage):p(s.nextSlideMessage)),e.includes(a)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?p(s.firstSlideMessage):p(s.prevSlideMessage))}t.pagination&&a.matches((0,i.c)(t.params.pagination.bulletClass))&&a.click()}}function y(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function E(){return y()&&t.params.pagination.clickable}const x=(e,t,s)=>{u(e),"BUTTON"!==e.tagName&&(h(e,"button"),e.addEventListener("keydown",b)),g(e,s),function(e,t){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},S=e=>{o&&o!==e.target&&!o.contains(e.target)&&(n=!0),t.a11y.clicked=!0},T=()=>{n=!1,requestAnimationFrame((()=>{requestAnimationFrame((()=>{t.destroyed||(t.a11y.clicked=!1)}))}))},M=e=>{c=(new Date).getTime()},C=e=>{if(t.a11y.clicked||!t.params.a11y.scrollOnFocus)return;if((new Date).getTime()-c<100)return;const s=e.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!s||!t.slides.includes(s))return;o=s;const a=t.slides.indexOf(s)===t.activeIndex,i=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(s);a||i||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,requestAnimationFrame((()=>{n||(t.params.loop?t.slideToLoop(parseInt(s.getAttribute("data-swiper-slide-index")),0):t.slideTo(t.slides.indexOf(s),0),n=!1)})))},P=()=>{const e=t.params.a11y;e.itemRoleDescriptionMessage&&f(t.slides,e.itemRoleDescriptionMessage),e.slideRole&&h(t.slides,e.slideRole);const s=t.slides.length;e.slideLabelMessage&&t.slides.forEach(((a,i)=>{const r=t.params.loop?parseInt(a.getAttribute("data-swiper-slide-index"),10):i;g(a,e.slideLabelMessage.replace(/\{\{index\}\}/,r+1).replace(/\{\{slidesLength\}\}/,s))}))};l("beforeInit",(()=>{d=(0,r.c)("span",t.params.a11y.notificationClass),d.setAttribute("aria-live","assertive"),d.setAttribute("aria-atomic","true")})),l("afterInit",(()=>{t.params.a11y.enabled&&(()=>{const e=t.params.a11y;t.el.append(d);const s=t.el;e.containerRoleDescriptionMessage&&f(s,e.containerRoleDescriptionMessage),e.containerMessage&&g(s,e.containerMessage),e.containerRole&&h(s,e.containerRole);const i=t.wrapperEl,l=e.id||i.getAttribute("id")||`swiper-wrapper-${n=16,void 0===n&&(n=16),"x".repeat(n).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}`;var n;const o=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";var c,p;c=i,p=l,(c=(0,r.m)(c)).forEach((e=>{e.setAttribute("id",p)})),function(e,t){(e=(0,r.m)(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(i,o),P();let{nextEl:u,prevEl:m}=t.navigation?t.navigation:{};u=(0,r.m)(u),m=(0,r.m)(m),u&&u.forEach((t=>x(t,l,e.nextSlideMessage))),m&&m.forEach((t=>x(t,l,e.prevSlideMessage))),E()&&(0,r.m)(t.pagination.el).forEach((e=>{e.addEventListener("keydown",b)})),(0,a.g)().addEventListener("visibilitychange",M),t.el.addEventListener("focus",C,!0),t.el.addEventListener("focus",C,!0),t.el.addEventListener("pointerdown",S,!0),t.el.addEventListener("pointerup",T,!0)})()})),l("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{t.params.a11y.enabled&&P()})),l("fromEdge toEdge afterInit lock unlock",(()=>{t.params.a11y.enabled&&function(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:e,prevEl:s}=t.navigation;s&&(t.isBeginning?(v(s),m(s)):(w(s),u(s))),e&&(t.isEnd?(v(e),m(e)):(w(e),u(e)))}()})),l("paginationUpdate",(()=>{t.params.a11y.enabled&&function(){const e=t.params.a11y;y()&&t.pagination.bullets.forEach((s=>{t.params.pagination.clickable&&(u(s),t.params.pagination.renderBullet||(h(s,"button"),g(s,e.paginationBulletMessage.replace(/\{\{index\}\}/,(0,r.h)(s)+1)))),s.matches((0,i.c)(t.params.pagination.bulletActiveClass))?s.setAttribute("aria-current","true"):s.removeAttribute("aria-current")}))}()})),l("destroy",(()=>{t.params.a11y.enabled&&function(){d&&d.remove();let{nextEl:e,prevEl:s}=t.navigation?t.navigation:{};e=(0,r.m)(e),s=(0,r.m)(s),e&&e.forEach((e=>e.removeEventListener("keydown",b))),s&&s.forEach((e=>e.removeEventListener("keydown",b))),E()&&(0,r.m)(t.pagination.el).forEach((e=>{e.removeEventListener("keydown",b)})),(0,a.g)().removeEventListener("visibilitychange",M),t.el&&"string"!=typeof t.el&&(t.el.removeEventListener("focus",C,!0),t.el.removeEventListener("pointerdown",S,!0),t.el.removeEventListener("pointerup",T,!0))}()}))}},"./node_modules/swiper/modules/autoplay.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs");function i(e){let t,s,{swiper:i,extendParams:r,on:l,emit:n,params:o}=e;i.autoplay={running:!1,paused:!1,timeLeft:0},r({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let d,c,p,u,m,h,f,g,v=o&&o.autoplay?o.autoplay.delay:3e3,w=o&&o.autoplay?o.autoplay.delay:3e3,b=(new Date).getTime();function y(e){i&&!i.destroyed&&i.wrapperEl&&e.target===i.wrapperEl&&(i.wrapperEl.removeEventListener("transitionend",y),g||e.detail&&e.detail.bySwiperTouchMove||C())}const E=()=>{if(i.destroyed||!i.autoplay.running)return;i.autoplay.paused?c=!0:c&&(w=d,c=!1);const e=i.autoplay.paused?d:b+w-(new Date).getTime();i.autoplay.timeLeft=e,n("autoplayTimeLeft",e,e/v),s=requestAnimationFrame((()=>{E()}))},x=e=>{if(i.destroyed||!i.autoplay.running)return;cancelAnimationFrame(s),E();let a=void 0===e?i.params.autoplay.delay:e;v=i.params.autoplay.delay,w=i.params.autoplay.delay;const r=(()=>{let e;if(e=i.virtual&&i.params.virtual.enabled?i.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]:i.slides[i.activeIndex],e)return parseInt(e.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(r)&&r>0&&void 0===e&&(a=r,v=r,w=r),d=a;const l=i.params.speed,o=()=>{i&&!i.destroyed&&(i.params.autoplay.reverseDirection?!i.isBeginning||i.params.loop||i.params.rewind?(i.slidePrev(l,!0,!0),n("autoplay")):i.params.autoplay.stopOnLastSlide||(i.slideTo(i.slides.length-1,l,!0,!0),n("autoplay")):!i.isEnd||i.params.loop||i.params.rewind?(i.slideNext(l,!0,!0),n("autoplay")):i.params.autoplay.stopOnLastSlide||(i.slideTo(0,l,!0,!0),n("autoplay")),i.params.cssMode&&(b=(new Date).getTime(),requestAnimationFrame((()=>{x()}))))};return a>0?(clearTimeout(t),t=setTimeout((()=>{o()}),a)):requestAnimationFrame((()=>{o()})),a},S=()=>{b=(new Date).getTime(),i.autoplay.running=!0,x(),n("autoplayStart")},T=()=>{i.autoplay.running=!1,clearTimeout(t),cancelAnimationFrame(s),n("autoplayStop")},M=(e,s)=>{if(i.destroyed||!i.autoplay.running)return;clearTimeout(t),e||(f=!0);const a=()=>{n("autoplayPause"),i.params.autoplay.waitForTransition?i.wrapperEl.addEventListener("transitionend",y):C()};if(i.autoplay.paused=!0,s)return h&&(d=i.params.autoplay.delay),h=!1,void a();const r=d||i.params.autoplay.delay;d=r-((new Date).getTime()-b),i.isEnd&&d<0&&!i.params.loop||(d<0&&(d=0),a())},C=()=>{i.isEnd&&d<0&&!i.params.loop||i.destroyed||!i.autoplay.running||(b=(new Date).getTime(),f?(f=!1,x(d)):x(),i.autoplay.paused=!1,n("autoplayResume"))},P=()=>{if(i.destroyed||!i.autoplay.running)return;const e=(0,a.g)();"hidden"===e.visibilityState&&(f=!0,M(!0)),"visible"===e.visibilityState&&C()},L=e=>{"mouse"===e.pointerType&&(f=!0,g=!0,i.animating||i.autoplay.paused||M(!0))},I=e=>{"mouse"===e.pointerType&&(g=!1,i.autoplay.paused&&C())};l("init",(()=>{i.params.autoplay.enabled&&(i.params.autoplay.pauseOnMouseEnter&&(i.el.addEventListener("pointerenter",L),i.el.addEventListener("pointerleave",I)),(0,a.g)().addEventListener("visibilitychange",P),S())})),l("destroy",(()=>{i.el&&"string"!=typeof i.el&&(i.el.removeEventListener("pointerenter",L),i.el.removeEventListener("pointerleave",I)),(0,a.g)().removeEventListener("visibilitychange",P),i.autoplay.running&&T()})),l("_freeModeStaticRelease",(()=>{(u||f)&&C()})),l("_freeModeNoMomentumRelease",(()=>{i.params.autoplay.disableOnInteraction?T():M(!0,!0)})),l("beforeTransitionStart",((e,t,s)=>{!i.destroyed&&i.autoplay.running&&(s||!i.params.autoplay.disableOnInteraction?M(!0,!0):T())})),l("sliderFirstMove",(()=>{!i.destroyed&&i.autoplay.running&&(i.params.autoplay.disableOnInteraction?T():(p=!0,u=!1,f=!1,m=setTimeout((()=>{f=!0,u=!0,M(!0)}),200)))})),l("touchEnd",(()=>{if(!i.destroyed&&i.autoplay.running&&p){if(clearTimeout(m),clearTimeout(t),i.params.autoplay.disableOnInteraction)return u=!1,void(p=!1);u&&i.params.cssMode&&C(),u=!1,p=!1}})),l("slideChange",(()=>{!i.destroyed&&i.autoplay.running&&(h=!0)})),Object.assign(i.autoplay,{start:S,stop:T,pause:M,resume:C})}},"./node_modules/swiper/modules/controller.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var a=s("./node_modules/swiper/shared/utils.mjs");function i(e){let{swiper:t,extendParams:s,on:i}=e;function r(e,t){const s=function(){let e,t,s;return(a,i)=>{for(t=-1,e=a.length;e-t>1;)s=e+t>>1,a[s]<=i?t=s:e=s;return e}}();let a,i;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(i=s(this.x,e),a=i-1,(e-this.x[a])*(this.y[i]-this.y[a])/(this.x[i]-this.x[a])+this.y[a]):0},this}function l(){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)}s({controller:{control:void 0,inverse:!1,by:"slide"}}),t.controller={control:void 0},i("beforeInit",(()=>{"undefined"!=typeof window&&("string"==typeof t.params.controller.control||t.params.controller.control instanceof HTMLElement)?("string"==typeof t.params.controller.control?[...document.querySelectorAll(t.params.controller.control)]:[t.params.controller.control]).forEach((e=>{if(t.controller.control||(t.controller.control=[]),e&&e.swiper)t.controller.control.push(e.swiper);else if(e){const s=`${t.params.eventsPrefix}init`,a=i=>{t.controller.control.push(i.detail[0]),t.update(),e.removeEventListener(s,a)};e.addEventListener(s,a)}})):t.controller.control=t.params.controller.control})),i("update",(()=>{l()})),i("resize",(()=>{l()})),i("observerUpdate",(()=>{l()})),i("setTranslate",((e,s,a)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTranslate(s,a)})),i("setTransition",((e,s,a)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTransition(s,a)})),Object.assign(t.controller,{setTranslate:function(e,s){const a=t.controller.control;let i,l;const n=t.constructor;function o(e){if(e.destroyed)return;const s=t.rtlTranslate?-t.translate:t.translate;"slide"===t.params.controller.by&&(function(e){t.controller.spline=t.params.loop?new r(t.slidesGrid,e.slidesGrid):new r(t.snapGrid,e.snapGrid)}(e),l=-t.controller.spline.interpolate(-s)),l&&"container"!==t.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(t.maxTranslate()-t.minTranslate()),!Number.isNaN(i)&&Number.isFinite(i)||(i=1),l=(s-t.minTranslate())*i+e.minTranslate()),t.params.controller.inverse&&(l=e.maxTranslate()-l),e.updateProgress(l),e.setTranslate(l,t),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(let e=0;e<a.length;e+=1)a[e]!==s&&a[e]instanceof n&&o(a[e]);else a instanceof n&&s!==a&&o(a)},setTransition:function(e,s){const i=t.constructor,r=t.controller.control;let l;function n(s){s.destroyed||(s.setTransition(e,t),0!==e&&(s.transitionStart(),s.params.autoHeight&&(0,a.n)((()=>{s.updateAutoHeight()})),(0,a.k)(s.wrapperEl,(()=>{r&&s.transitionEnd()}))))}if(Array.isArray(r))for(l=0;l<r.length;l+=1)r[l]!==s&&r[l]instanceof i&&n(r[l]);else r instanceof i&&s!==r&&n(r)}})}},"./node_modules/swiper/modules/effect-cards.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>o});var a=s("./node_modules/swiper/shared/create-shadow.mjs"),i=s("./node_modules/swiper/shared/effect-init.mjs"),r=s("./node_modules/swiper/shared/effect-target.mjs"),l=s("./node_modules/swiper/shared/effect-virtual-transition-end.mjs"),n=s("./node_modules/swiper/shared/utils.mjs");function o(e){let{swiper:t,extendParams:s,on:o}=e;s({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),(0,i.e)({effect:"cards",swiper:t,on:o,setTranslate:()=>{const{slides:e,activeIndex:s,rtlTranslate:i}=t,l=t.params.cardsEffect,{startTranslate:n,isTouched:o}=t.touchEventsData,d=i?-t.translate:t.translate;for(let c=0;c<e.length;c+=1){const p=e[c],u=p.progress,m=Math.min(Math.max(u,-4),4);let h=p.swiperSlideOffset;t.params.centeredSlides&&!t.params.cssMode&&(t.wrapperEl.style.transform=`translateX(${t.minTranslate()}px)`),t.params.centeredSlides&&t.params.cssMode&&(h-=e[0].swiperSlideOffset);let f=t.params.cssMode?-h-t.translate:-h,g=0;const v=-100*Math.abs(m);let w=1,b=-l.perSlideRotate*m,y=l.perSlideOffset-.75*Math.abs(m);const E=t.virtual&&t.params.virtual.enabled?t.virtual.from+c:c,x=(E===s||E===s-1)&&m>0&&m<1&&(o||t.params.cssMode)&&d<n,S=(E===s||E===s+1)&&m<0&&m>-1&&(o||t.params.cssMode)&&d>n;if(x||S){const e=(1-Math.abs((Math.abs(m)-.5)/.5))**.5;b+=-28*m*e,w+=-.5*e,y+=96*e,g=-25*e*Math.abs(m)+"%"}if(f=m<0?`calc(${f}px ${i?"-":"+"} (${y*Math.abs(m)}%))`:m>0?`calc(${f}px ${i?"-":"+"} (-${y*Math.abs(m)}%))`:`${f}px`,!t.isHorizontal()){const e=g;g=f,f=e}const T=m<0?""+(1+(1-w)*m):""+(1-(1-w)*m),M=`\n        translate3d(${f}, ${g}, ${v}px)\n        rotateZ(${l.rotate?i?-b:b:0}deg)\n        scale(${T})\n      `;if(l.slideShadows){let e=p.querySelector(".swiper-slide-shadow");e||(e=(0,a.c)("cards",p)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(m)-.5)/.5,0),1))}p.style.zIndex=-Math.abs(Math.round(u))+e.length,(0,r.e)(l,p).style.transform=M}},setTransition:e=>{const s=t.slides.map((e=>(0,n.g)(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),(0,l.e)({swiper:t,duration:e,transformElements:s})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})}},"./node_modules/swiper/modules/effect-coverflow.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});var a=s("./node_modules/swiper/shared/create-shadow.mjs"),i=s("./node_modules/swiper/shared/effect-init.mjs"),r=s("./node_modules/swiper/shared/effect-target.mjs"),l=s("./node_modules/swiper/shared/utils.mjs");function n(e){let{swiper:t,extendParams:s,on:n}=e;s({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),(0,i.e)({effect:"coverflow",swiper:t,on:n,setTranslate:()=>{const{width:e,height:s,slides:i,slidesSizesGrid:n}=t,o=t.params.coverflowEffect,d=t.isHorizontal(),c=t.translate,p=d?e/2-c:s/2-c,u=d?o.rotate:-o.rotate,m=o.depth,h=(0,l.o)(t);for(let e=0,t=i.length;e<t;e+=1){const t=i[e],s=n[e],l=(p-t.swiperSlideOffset-s/2)/s,c="function"==typeof o.modifier?o.modifier(l):l*o.modifier;let f=d?u*c:0,g=d?0:u*c,v=-m*Math.abs(c),w=o.stretch;"string"==typeof w&&-1!==w.indexOf("%")&&(w=parseFloat(o.stretch)/100*s);let b=d?0:w*c,y=d?w*c:0,E=1-(1-o.scale)*Math.abs(c);Math.abs(y)<.001&&(y=0),Math.abs(b)<.001&&(b=0),Math.abs(v)<.001&&(v=0),Math.abs(f)<.001&&(f=0),Math.abs(g)<.001&&(g=0),Math.abs(E)<.001&&(E=0);const x=`translate3d(${y}px,${b}px,${v}px)  rotateX(${h(g)}deg) rotateY(${h(f)}deg) scale(${E})`;if((0,r.e)(o,t).style.transform=x,t.style.zIndex=1-Math.abs(Math.round(c)),o.slideShadows){let e=d?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),s=d?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");e||(e=(0,a.c)("coverflow",t,d?"left":"top")),s||(s=(0,a.c)("coverflow",t,d?"right":"bottom")),e&&(e.style.opacity=c>0?c:0),s&&(s.style.opacity=-c>0?-c:0)}}},setTransition:e=>{t.slides.map((e=>(0,l.g)(e))).forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})}},"./node_modules/swiper/modules/effect-creative.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>o});var a=s("./node_modules/swiper/shared/create-shadow.mjs"),i=s("./node_modules/swiper/shared/effect-init.mjs"),r=s("./node_modules/swiper/shared/effect-target.mjs"),l=s("./node_modules/swiper/shared/effect-virtual-transition-end.mjs"),n=s("./node_modules/swiper/shared/utils.mjs");function o(e){let{swiper:t,extendParams:s,on:o}=e;s({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const d=e=>"string"==typeof e?e:`${e}px`;(0,i.e)({effect:"creative",swiper:t,on:o,setTranslate:()=>{const{slides:e,wrapperEl:s,slidesSizesGrid:i}=t,l=t.params.creativeEffect,{progressMultiplier:o}=l,c=t.params.centeredSlides,p=(0,n.o)(t);if(c){const e=i[0]/2-t.params.slidesOffsetBefore||0;s.style.transform=`translateX(calc(50% - ${e}px))`}for(let s=0;s<e.length;s+=1){const i=e[s],n=i.progress,u=Math.min(Math.max(i.progress,-l.limitProgress),l.limitProgress);let m=u;c||(m=Math.min(Math.max(i.originalProgress,-l.limitProgress),l.limitProgress));const h=i.swiperSlideOffset,f=[t.params.cssMode?-h-t.translate:-h,0,0],g=[0,0,0];let v=!1;t.isHorizontal()||(f[1]=f[0],f[0]=0);let w={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};u<0?(w=l.next,v=!0):u>0&&(w=l.prev,v=!0),f.forEach(((e,t)=>{f[t]=`calc(${e}px + (${d(w.translate[t])} * ${Math.abs(u*o)}))`})),g.forEach(((e,t)=>{let s=w.rotate[t]*Math.abs(u*o);g[t]=s})),i.style.zIndex=-Math.abs(Math.round(n))+e.length;const b=f.join(", "),y=`rotateX(${p(g[0])}deg) rotateY(${p(g[1])}deg) rotateZ(${p(g[2])}deg)`,E=m<0?`scale(${1+(1-w.scale)*m*o})`:`scale(${1-(1-w.scale)*m*o})`,x=m<0?1+(1-w.opacity)*m*o:1-(1-w.opacity)*m*o,S=`translate3d(${b}) ${y} ${E}`;if(v&&w.shadow||!v){let e=i.querySelector(".swiper-slide-shadow");if(!e&&w.shadow&&(e=(0,a.c)("creative",i)),e){const t=l.shadowPerProgress?u*(1/l.limitProgress):u;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const T=(0,r.e)(l,i);T.style.transform=S,T.style.opacity=x,w.origin&&(T.style.transformOrigin=w.origin)}},setTransition:e=>{const s=t.slides.map((e=>(0,n.g)(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),(0,l.e)({swiper:t,duration:e,transformElements:s,allSlides:!0})},perspective:()=>t.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})}},"./node_modules/swiper/modules/effect-cube.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/effect-init.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let{swiper:t,extendParams:s,on:r}=e;s({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const l=(e,t,s)=>{let a=s?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),r=s?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");a||(a=(0,i.c)("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(s?"left":"top")).split(" ")),e.append(a)),r||(r=(0,i.c)("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(s?"right":"bottom")).split(" ")),e.append(r)),a&&(a.style.opacity=Math.max(-t,0)),r&&(r.style.opacity=Math.max(t,0))};(0,a.e)({effect:"cube",swiper:t,on:r,setTranslate:()=>{const{el:e,wrapperEl:s,slides:a,width:r,height:n,rtlTranslate:o,size:d,browser:c}=t,p=(0,i.o)(t),u=t.params.cubeEffect,m=t.isHorizontal(),h=t.virtual&&t.params.virtual.enabled;let f,g=0;u.shadow&&(m?(f=t.wrapperEl.querySelector(".swiper-cube-shadow"),f||(f=(0,i.c)("div","swiper-cube-shadow"),t.wrapperEl.append(f)),f.style.height=`${r}px`):(f=e.querySelector(".swiper-cube-shadow"),f||(f=(0,i.c)("div","swiper-cube-shadow"),e.append(f))));for(let e=0;e<a.length;e+=1){const t=a[e];let s=e;h&&(s=parseInt(t.getAttribute("data-swiper-slide-index"),10));let i=90*s,r=Math.floor(i/360);o&&(i=-i,r=Math.floor(-i/360));const n=Math.max(Math.min(t.progress,1),-1);let c=0,f=0,v=0;s%4==0?(c=4*-r*d,v=0):(s-1)%4==0?(c=0,v=4*-r*d):(s-2)%4==0?(c=d+4*r*d,v=d):(s-3)%4==0&&(c=-d,v=3*d+4*d*r),o&&(c=-c),m||(f=c,c=0);const w=`rotateX(${p(m?0:-i)}deg) rotateY(${p(m?i:0)}deg) translate3d(${c}px, ${f}px, ${v}px)`;n<=1&&n>-1&&(g=90*s+90*n,o&&(g=90*-s-90*n)),t.style.transform=w,u.slideShadows&&l(t,n,m)}if(s.style.transformOrigin=`50% 50% -${d/2}px`,s.style["-webkit-transform-origin"]=`50% 50% -${d/2}px`,u.shadow)if(m)f.style.transform=`translate3d(0px, ${r/2+u.shadowOffset}px, ${-r/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${u.shadowScale})`;else{const e=Math.abs(g)-90*Math.floor(Math.abs(g)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),s=u.shadowScale,a=u.shadowScale/t,i=u.shadowOffset;f.style.transform=`scale3d(${s}, 1, ${a}) translate3d(0px, ${n/2+i}px, ${-n/2/a}px) rotateX(-89.99deg)`}const v=(c.isSafari||c.isWebView)&&c.needPerspectiveFix?-d/2:0;s.style.transform=`translate3d(0px,0,${v}px) rotateX(${p(t.isHorizontal()?0:g)}deg) rotateY(${p(t.isHorizontal()?-g:0)}deg)`,s.style.setProperty("--swiper-cube-translate-z",`${v}px`)},setTransition:e=>{const{el:s,slides:a}=t;if(a.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),t.params.cubeEffect.shadow&&!t.isHorizontal()){const t=s.querySelector(".swiper-cube-shadow");t&&(t.style.transitionDuration=`${e}ms`)}},recreateShadows:()=>{const e=t.isHorizontal();t.slides.forEach((t=>{const s=Math.max(Math.min(t.progress,1),-1);l(t,s,e)}))},getEffectParams:()=>t.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})}},"./node_modules/swiper/modules/effect-fade.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});var a=s("./node_modules/swiper/shared/effect-init.mjs"),i=s("./node_modules/swiper/shared/effect-target.mjs"),r=s("./node_modules/swiper/shared/effect-virtual-transition-end.mjs"),l=s("./node_modules/swiper/shared/utils.mjs");function n(e){let{swiper:t,extendParams:s,on:n}=e;s({fadeEffect:{crossFade:!1}}),(0,a.e)({effect:"fade",swiper:t,on:n,setTranslate:()=>{const{slides:e}=t,s=t.params.fadeEffect;for(let a=0;a<e.length;a+=1){const e=t.slides[a];let r=-e.swiperSlideOffset;t.params.virtualTranslate||(r-=t.translate);let l=0;t.isHorizontal()||(l=r,r=0);const n=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),o=(0,i.e)(s,e);o.style.opacity=n,o.style.transform=`translate3d(${r}px, ${l}px, 0px)`}},setTransition:e=>{const s=t.slides.map((e=>(0,l.g)(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`})),(0,r.e)({swiper:t,duration:e,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})}},"./node_modules/swiper/modules/effect-flip.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>o});var a=s("./node_modules/swiper/shared/create-shadow.mjs"),i=s("./node_modules/swiper/shared/effect-init.mjs"),r=s("./node_modules/swiper/shared/effect-target.mjs"),l=s("./node_modules/swiper/shared/effect-virtual-transition-end.mjs"),n=s("./node_modules/swiper/shared/utils.mjs");function o(e){let{swiper:t,extendParams:s,on:o}=e;s({flipEffect:{slideShadows:!0,limitRotation:!0}});const d=(e,s)=>{let i=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),r=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");i||(i=(0,a.c)("flip",e,t.isHorizontal()?"left":"top")),r||(r=(0,a.c)("flip",e,t.isHorizontal()?"right":"bottom")),i&&(i.style.opacity=Math.max(-s,0)),r&&(r.style.opacity=Math.max(s,0))};(0,i.e)({effect:"flip",swiper:t,on:o,setTranslate:()=>{const{slides:e,rtlTranslate:s}=t,a=t.params.flipEffect,i=(0,n.o)(t);for(let l=0;l<e.length;l+=1){const n=e[l];let o=n.progress;t.params.flipEffect.limitRotation&&(o=Math.max(Math.min(n.progress,1),-1));const c=n.swiperSlideOffset;let p=-180*o,u=0,m=t.params.cssMode?-c-t.translate:-c,h=0;t.isHorizontal()?s&&(p=-p):(h=m,m=0,u=-p,p=0),n.style.zIndex=-Math.abs(Math.round(o))+e.length,a.slideShadows&&d(n,o);const f=`translate3d(${m}px, ${h}px, 0px) rotateX(${i(u)}deg) rotateY(${i(p)}deg)`;(0,r.e)(a,n).style.transform=f}},setTransition:e=>{const s=t.slides.map((e=>(0,n.g)(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),(0,l.e)({swiper:t,duration:e,transformElements:s})},recreateShadows:()=>{t.params.flipEffect,t.slides.forEach((e=>{let s=e.progress;t.params.flipEffect.limitRotation&&(s=Math.max(Math.min(e.progress,1),-1)),d(e,s)}))},getEffectParams:()=>t.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})}},"./node_modules/swiper/modules/free-mode.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var a=s("./node_modules/swiper/shared/utils.mjs");function i(e){let{swiper:t,extendParams:s,emit:i,once:r}=e;s({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(t,{freeMode:{onTouchStart:function(){if(t.params.cssMode)return;const e=t.getTranslate();t.setTranslate(e),t.setTransition(0),t.touchEventsData.velocities.length=0,t.freeMode.onTouchEnd({currentPos:t.rtl?t.translate:-t.translate})},onTouchMove:function(){if(t.params.cssMode)return;const{touchEventsData:e,touches:s}=t;0===e.velocities.length&&e.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:(0,a.d)()})},onTouchEnd:function(e){let{currentPos:s}=e;if(t.params.cssMode)return;const{params:l,wrapperEl:n,rtlTranslate:o,snapGrid:d,touchEventsData:c}=t,p=(0,a.d)()-c.touchStartTime;if(s<-t.minTranslate())t.slideTo(t.activeIndex);else if(s>-t.maxTranslate())t.slides.length<d.length?t.slideTo(d.length-1):t.slideTo(t.slides.length-1);else{if(l.freeMode.momentum){if(c.velocities.length>1){const e=c.velocities.pop(),s=c.velocities.pop(),i=e.position-s.position,r=e.time-s.time;t.velocity=i/r,t.velocity/=2,Math.abs(t.velocity)<l.freeMode.minimumVelocity&&(t.velocity=0),(r>150||(0,a.d)()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=l.freeMode.momentumVelocityRatio,c.velocities.length=0;let e=1e3*l.freeMode.momentumRatio;const s=t.velocity*e;let p=t.translate+s;o&&(p=-p);let u,m=!1;const h=20*Math.abs(t.velocity)*l.freeMode.momentumBounceRatio;let f;if(p<t.maxTranslate())l.freeMode.momentumBounce?(p+t.maxTranslate()<-h&&(p=t.maxTranslate()-h),u=t.maxTranslate(),m=!0,c.allowMomentumBounce=!0):p=t.maxTranslate(),l.loop&&l.centeredSlides&&(f=!0);else if(p>t.minTranslate())l.freeMode.momentumBounce?(p-t.minTranslate()>h&&(p=t.minTranslate()+h),u=t.minTranslate(),m=!0,c.allowMomentumBounce=!0):p=t.minTranslate(),l.loop&&l.centeredSlides&&(f=!0);else if(l.freeMode.sticky){let e;for(let t=0;t<d.length;t+=1)if(d[t]>-p){e=t;break}p=Math.abs(d[e]-p)<Math.abs(d[e-1]-p)||"next"===t.swipeDirection?d[e]:d[e-1],p=-p}if(f&&r("transitionEnd",(()=>{t.loopFix()})),0!==t.velocity){if(e=o?Math.abs((-p-t.translate)/t.velocity):Math.abs((p-t.translate)/t.velocity),l.freeMode.sticky){const s=Math.abs((o?-p:p)-t.translate),a=t.slidesSizesGrid[t.activeIndex];e=s<a?l.speed:s<2*a?1.5*l.speed:2.5*l.speed}}else if(l.freeMode.sticky)return void t.slideToClosest();l.freeMode.momentumBounce&&m?(t.updateProgress(u),t.setTransition(e),t.setTranslate(p),t.transitionStart(!0,t.swipeDirection),t.animating=!0,(0,a.k)(n,(()=>{t&&!t.destroyed&&c.allowMomentumBounce&&(i("momentumBounce"),t.setTransition(l.speed),setTimeout((()=>{t.setTranslate(u),(0,a.k)(n,(()=>{t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(i("_freeModeNoMomentumRelease"),t.updateProgress(p),t.setTransition(e),t.setTranslate(p),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,(0,a.k)(n,(()=>{t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(p),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(l.freeMode.sticky)return void t.slideToClosest();l.freeMode&&i("_freeModeNoMomentumRelease")}(!l.freeMode.momentum||p>=l.longSwipesMs)&&(i("_freeModeStaticRelease"),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}}}})}},"./node_modules/swiper/modules/grid.mjs":(e,t,s)=>{function a(e){let t,s,a,i,{swiper:r,extendParams:l,on:n}=e;l({grid:{rows:1,fill:"column"}});const o=()=>{let e=r.params.spaceBetween;return"string"==typeof e&&e.indexOf("%")>=0?e=parseFloat(e.replace("%",""))/100*r.size:"string"==typeof e&&(e=parseFloat(e)),e};n("init",(()=>{i=r.params.grid&&r.params.grid.rows>1})),n("update",(()=>{const{params:e,el:t}=r,s=e.grid&&e.grid.rows>1;i&&!s?(t.classList.remove(`${e.containerModifierClass}grid`,`${e.containerModifierClass}grid-column`),a=1,r.emitContainerClasses()):!i&&s&&(t.classList.add(`${e.containerModifierClass}grid`),"column"===e.grid.fill&&t.classList.add(`${e.containerModifierClass}grid-column`),r.emitContainerClasses()),i=s})),r.grid={initSlides:e=>{const{slidesPerView:i}=r.params,{rows:l,fill:n}=r.params.grid,o=r.virtual&&r.params.virtual.enabled?r.virtual.slides.length:e.length;a=Math.floor(o/l),t=Math.floor(o/l)===o/l?o:Math.ceil(o/l)*l,"auto"!==i&&"row"===n&&(t=Math.max(t,i*l)),s=t/l},unsetSlides:()=>{r.slides&&r.slides.forEach((e=>{e.swiperSlideGridSet&&(e.style.height="",e.style[r.getDirectionLabel("margin-top")]="")}))},updateSlide:(e,i,l)=>{const{slidesPerGroup:n}=r.params,d=o(),{rows:c,fill:p}=r.params.grid,u=r.virtual&&r.params.virtual.enabled?r.virtual.slides.length:l.length;let m,h,f;if("row"===p&&n>1){const s=Math.floor(e/(n*c)),a=e-c*n*s,r=0===s?n:Math.min(Math.ceil((u-s*c*n)/c),n);f=Math.floor(a/r),h=a-f*r+s*n,m=h+f*t/c,i.style.order=m}else"column"===p?(h=Math.floor(e/c),f=e-h*c,(h>a||h===a&&f===c-1)&&(f+=1,f>=c&&(f=0,h+=1))):(f=Math.floor(e/s),h=e-f*s);i.row=f,i.column=h,i.style.height=`calc((100% - ${(c-1)*d}px) / ${c})`,i.style[r.getDirectionLabel("margin-top")]=0!==f?d&&`${d}px`:"",i.swiperSlideGridSet=!0},updateWrapperSize:(e,s)=>{const{centeredSlides:a,roundLengths:i}=r.params,l=o(),{rows:n}=r.params.grid;if(r.virtualSize=(e+l)*t,r.virtualSize=Math.ceil(r.virtualSize/n)-l,r.params.cssMode||(r.wrapperEl.style[r.getDirectionLabel("width")]=`${r.virtualSize+l}px`),a){const e=[];for(let t=0;t<s.length;t+=1){let a=s[t];i&&(a=Math.floor(a)),s[t]<r.virtualSize+s[0]&&e.push(a)}s.splice(0,s.length),s.push(...e)}}}}s.r(t),s.d(t,{default:()=>a})},"./node_modules/swiper/modules/hash-navigation.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let{swiper:t,extendParams:s,emit:r,on:l}=e,n=!1;const o=(0,a.g)(),d=(0,a.a)();s({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(e,s){if(t.virtual&&t.params.virtual.enabled){const e=t.slides.filter((e=>e.getAttribute("data-hash")===s))[0];return e?parseInt(e.getAttribute("data-swiper-slide-index"),10):0}return t.getSlideIndex((0,i.e)(t.slidesEl,`.${t.params.slideClass}[data-hash="${s}"], swiper-slide[data-hash="${s}"]`)[0])}}});const c=()=>{r("hashChange");const e=o.location.hash.replace("#",""),s=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex];if(e!==(s?s.getAttribute("data-hash"):"")){const s=t.params.hashNavigation.getSlideIndex(t,e);if(void 0===s||Number.isNaN(s))return;t.slideTo(s)}},p=()=>{if(!n||!t.params.hashNavigation.enabled)return;const e=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex],s=e?e.getAttribute("data-hash")||e.getAttribute("data-history"):"";t.params.hashNavigation.replaceState&&d.history&&d.history.replaceState?(d.history.replaceState(null,null,`#${s}`||""),r("hashSet")):(o.location.hash=s||"",r("hashSet"))};l("init",(()=>{t.params.hashNavigation.enabled&&(()=>{if(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)return;n=!0;const e=o.location.hash.replace("#","");if(e){const s=0,a=t.params.hashNavigation.getSlideIndex(t,e);t.slideTo(a||0,s,t.params.runCallbacksOnInit,!0)}t.params.hashNavigation.watchState&&d.addEventListener("hashchange",c)})()})),l("destroy",(()=>{t.params.hashNavigation.enabled&&t.params.hashNavigation.watchState&&d.removeEventListener("hashchange",c)})),l("transitionEnd _freeModeNoMomentumRelease",(()=>{n&&p()})),l("slideChange",(()=>{n&&t.params.cssMode&&p()}))}},"./node_modules/swiper/modules/history.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs");function i(e){let{swiper:t,extendParams:s,on:i}=e;s({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let r=!1,l={};const n=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),o=e=>{const t=(0,a.a)();let s;s=e?new URL(e):t.location;const i=s.pathname.slice(1).split("/").filter((e=>""!==e)),r=i.length;return{key:i[r-2],value:i[r-1]}},d=(e,s)=>{const i=(0,a.a)();if(!r||!t.params.history.enabled)return;let l;l=t.params.url?new URL(t.params.url):i.location;const o=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${s}"]`):t.slides[s];let d=n(o.getAttribute("data-history"));if(t.params.history.root.length>0){let s=t.params.history.root;"/"===s[s.length-1]&&(s=s.slice(0,s.length-1)),d=`${s}/${e?`${e}/`:""}${d}`}else l.pathname.includes(e)||(d=`${e?`${e}/`:""}${d}`);t.params.history.keepQuery&&(d+=l.search);const c=i.history.state;c&&c.value===d||(t.params.history.replaceState?i.history.replaceState({value:d},null,d):i.history.pushState({value:d},null,d))},c=(e,s,a)=>{if(s)for(let i=0,r=t.slides.length;i<r;i+=1){const r=t.slides[i];if(n(r.getAttribute("data-history"))===s){const s=t.getSlideIndex(r);t.slideTo(s,e,a)}}else t.slideTo(0,e,a)},p=()=>{l=o(t.params.url),c(t.params.speed,l.value,!1)};i("init",(()=>{t.params.history.enabled&&(()=>{const e=(0,a.a)();if(t.params.history){if(!e.history||!e.history.pushState)return t.params.history.enabled=!1,void(t.params.hashNavigation.enabled=!0);r=!0,l=o(t.params.url),l.key||l.value?(c(0,l.value,t.params.runCallbacksOnInit),t.params.history.replaceState||e.addEventListener("popstate",p)):t.params.history.replaceState||e.addEventListener("popstate",p)}})()})),i("destroy",(()=>{t.params.history.enabled&&(()=>{const e=(0,a.a)();t.params.history.replaceState||e.removeEventListener("popstate",p)})()})),i("transitionEnd _freeModeNoMomentumRelease",(()=>{r&&d(t.params.history.key,t.activeIndex)})),i("slideChange",(()=>{r&&t.params.cssMode&&d(t.params.history.key,t.activeIndex)}))}},"./node_modules/swiper/modules/index.mjs":(e,t,s)=>{s.r(t),s.d(t,{A11y:()=>u.default,Autoplay:()=>f.default,Controller:()=>p.default,EffectCards:()=>M.default,EffectCoverflow:()=>S.default,EffectCreative:()=>T.default,EffectCube:()=>E.default,EffectFade:()=>y.default,EffectFlip:()=>x.default,FreeMode:()=>v.default,Grid:()=>w.default,HashNavigation:()=>h.default,History:()=>m.default,Keyboard:()=>i.default,Manipulation:()=>b.default,Mousewheel:()=>r.default,Navigation:()=>l.default,Pagination:()=>n.default,Parallax:()=>d.default,Scrollbar:()=>o.default,Thumbs:()=>g.default,Virtual:()=>a.default,Zoom:()=>c.default});var a=s("./node_modules/swiper/modules/virtual.mjs"),i=s("./node_modules/swiper/modules/keyboard.mjs"),r=s("./node_modules/swiper/modules/mousewheel.mjs"),l=s("./node_modules/swiper/modules/navigation.mjs"),n=s("./node_modules/swiper/modules/pagination.mjs"),o=s("./node_modules/swiper/modules/scrollbar.mjs"),d=s("./node_modules/swiper/modules/parallax.mjs"),c=s("./node_modules/swiper/modules/zoom.mjs"),p=s("./node_modules/swiper/modules/controller.mjs"),u=s("./node_modules/swiper/modules/a11y.mjs"),m=s("./node_modules/swiper/modules/history.mjs"),h=s("./node_modules/swiper/modules/hash-navigation.mjs"),f=s("./node_modules/swiper/modules/autoplay.mjs"),g=s("./node_modules/swiper/modules/thumbs.mjs"),v=s("./node_modules/swiper/modules/free-mode.mjs"),w=s("./node_modules/swiper/modules/grid.mjs"),b=s("./node_modules/swiper/modules/manipulation.mjs"),y=s("./node_modules/swiper/modules/effect-fade.mjs"),E=s("./node_modules/swiper/modules/effect-cube.mjs"),x=s("./node_modules/swiper/modules/effect-flip.mjs"),S=s("./node_modules/swiper/modules/effect-coverflow.mjs"),T=s("./node_modules/swiper/modules/effect-creative.mjs"),M=s("./node_modules/swiper/modules/effect-cards.mjs")},"./node_modules/swiper/modules/keyboard.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let{swiper:t,extendParams:s,on:r,emit:l}=e;const n=(0,a.g)(),o=(0,a.a)();function d(e){if(!t.enabled)return;const{rtlTranslate:s}=t;let a=e;a.originalEvent&&(a=a.originalEvent);const r=a.keyCode||a.charCode,d=t.params.keyboard.pageUpDown,c=d&&33===r,p=d&&34===r,u=37===r,m=39===r,h=38===r,f=40===r;if(!t.allowSlideNext&&(t.isHorizontal()&&m||t.isVertical()&&f||p))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&u||t.isVertical()&&h||c))return!1;if(!(a.shiftKey||a.altKey||a.ctrlKey||a.metaKey||n.activeElement&&n.activeElement.nodeName&&("input"===n.activeElement.nodeName.toLowerCase()||"textarea"===n.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(c||p||u||m||h||f)){let e=!1;if((0,i.a)(t.el,`.${t.params.slideClass}, swiper-slide`).length>0&&0===(0,i.a)(t.el,`.${t.params.slideActiveClass}`).length)return;const a=t.el,r=a.clientWidth,l=a.clientHeight,n=o.innerWidth,d=o.innerHeight,c=(0,i.b)(a);s&&(c.left-=a.scrollLeft);const p=[[c.left,c.top],[c.left+r,c.top],[c.left,c.top+l],[c.left+r,c.top+l]];for(let t=0;t<p.length;t+=1){const s=p[t];if(s[0]>=0&&s[0]<=n&&s[1]>=0&&s[1]<=d){if(0===s[0]&&0===s[1])continue;e=!0}}if(!e)return}t.isHorizontal()?((c||p||u||m)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),((p||m)&&!s||(c||u)&&s)&&t.slideNext(),((c||u)&&!s||(p||m)&&s)&&t.slidePrev()):((c||p||h||f)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),(p||f)&&t.slideNext(),(c||h)&&t.slidePrev()),l("keyPress",r)}}function c(){t.keyboard.enabled||(n.addEventListener("keydown",d),t.keyboard.enabled=!0)}function p(){t.keyboard.enabled&&(n.removeEventListener("keydown",d),t.keyboard.enabled=!1)}t.keyboard={enabled:!1},s({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),r("init",(()=>{t.params.keyboard.enabled&&c()})),r("destroy",(()=>{t.keyboard.enabled&&p()})),Object.assign(t.keyboard,{enable:c,disable:p})}},"./node_modules/swiper/modules/manipulation.mjs":(e,t,s)=>{function a(e){const t=this,{params:s,slidesEl:a}=t;s.loop&&t.loopDestroy();const i=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,a.append(t.children[0]),t.innerHTML=""}else a.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i(e[t]);else i(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update()}function i(e){const t=this,{params:s,activeIndex:a,slidesEl:i}=t;s.loop&&t.loopDestroy();let r=a+1;const l=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,i.prepend(t.children[0]),t.innerHTML=""}else i.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&l(e[t]);r=a+e.length}else l(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),t.slideTo(r,0,!1)}function r(e,t){const s=this,{params:a,activeIndex:i,slidesEl:r}=s;let l=i;a.loop&&(l-=s.loopedSlides,s.loopDestroy(),s.recalcSlides());const n=s.slides.length;if(e<=0)return void s.prependSlide(t);if(e>=n)return void s.appendSlide(t);let o=l>e?l+1:l;const d=[];for(let t=n-1;t>=e;t-=1){const e=s.slides[t];e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&r.append(t[e]);o=l>e?l+t.length:l}else r.append(t);for(let e=0;e<d.length;e+=1)r.append(d[e]);s.recalcSlides(),a.loop&&s.loopCreate(),a.observer&&!s.isElement||s.update(),a.loop?s.slideTo(o+s.loopedSlides,0,!1):s.slideTo(o,0,!1)}function l(e){const t=this,{params:s,activeIndex:a}=t;let i=a;s.loop&&(i-=t.loopedSlides,t.loopDestroy());let r,l=i;if("object"==typeof e&&"length"in e){for(let s=0;s<e.length;s+=1)r=e[s],t.slides[r]&&t.slides[r].remove(),r<l&&(l-=1);l=Math.max(l,0)}else r=e,t.slides[r]&&t.slides[r].remove(),r<l&&(l-=1),l=Math.max(l,0);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),s.loop?t.slideTo(l+t.loopedSlides,0,!1):t.slideTo(l,0,!1)}function n(){const e=this,t=[];for(let s=0;s<e.slides.length;s+=1)t.push(s);e.removeSlide(t)}function o(e){let{swiper:t}=e;Object.assign(t,{appendSlide:a.bind(t),prependSlide:i.bind(t),addSlide:r.bind(t),removeSlide:l.bind(t),removeAllSlides:n.bind(t)})}s.r(t),s.d(t,{default:()=>o})},"./node_modules/swiper/modules/mousewheel.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let{swiper:t,extendParams:s,on:r,emit:l}=e;const n=(0,a.a)();let o;s({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),t.mousewheel={enabled:!1};let d,c=(0,i.d)();const p=[];function u(){t.enabled&&(t.mouseEntered=!0)}function m(){t.enabled&&(t.mouseEntered=!1)}function h(e){return!(t.params.mousewheel.thresholdDelta&&e.delta<t.params.mousewheel.thresholdDelta||t.params.mousewheel.thresholdTime&&(0,i.d)()-c<t.params.mousewheel.thresholdTime||!(e.delta>=6&&(0,i.d)()-c<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),l("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),l("scroll",e.raw)),c=(new n.Date).getTime(),1))}function f(e){let s=e,a=!0;if(!t.enabled)return;if(e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`))return;const r=t.params.mousewheel;t.params.cssMode&&s.preventDefault();let n=t.el;"container"!==t.params.mousewheel.eventsTarget&&(n=document.querySelector(t.params.mousewheel.eventsTarget));const c=n&&n.contains(s.target);if(!t.mouseEntered&&!c&&!r.releaseOnEdges)return!0;s.originalEvent&&(s=s.originalEvent);let u=0;const m=t.rtlTranslate?-1:1,f=function(e){let t=0,s=0,a=0,i=0;return"detail"in e&&(s=e.detail),"wheelDelta"in e&&(s=-e.wheelDelta/120),"wheelDeltaY"in e&&(s=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=s,s=0),a=10*t,i=10*s,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(a=e.deltaX),e.shiftKey&&!a&&(a=i,i=0),(a||i)&&e.deltaMode&&(1===e.deltaMode?(a*=40,i*=40):(a*=800,i*=800)),a&&!t&&(t=a<1?-1:1),i&&!s&&(s=i<1?-1:1),{spinX:t,spinY:s,pixelX:a,pixelY:i}}(s);if(r.forceToAxis)if(t.isHorizontal()){if(!(Math.abs(f.pixelX)>Math.abs(f.pixelY)))return!0;u=-f.pixelX*m}else{if(!(Math.abs(f.pixelY)>Math.abs(f.pixelX)))return!0;u=-f.pixelY}else u=Math.abs(f.pixelX)>Math.abs(f.pixelY)?-f.pixelX*m:-f.pixelY;if(0===u)return!0;r.invert&&(u=-u);let g=t.getTranslate()+u*r.sensitivity;if(g>=t.minTranslate()&&(g=t.minTranslate()),g<=t.maxTranslate()&&(g=t.maxTranslate()),a=!!t.params.loop||!(g===t.minTranslate()||g===t.maxTranslate()),a&&t.params.nested&&s.stopPropagation(),t.params.freeMode&&t.params.freeMode.enabled){const e={time:(0,i.d)(),delta:Math.abs(u),direction:Math.sign(u)},a=d&&e.time<d.time+500&&e.delta<=d.delta&&e.direction===d.direction;if(!a){d=void 0;let n=t.getTranslate()+u*r.sensitivity;const c=t.isBeginning,m=t.isEnd;if(n>=t.minTranslate()&&(n=t.minTranslate()),n<=t.maxTranslate()&&(n=t.maxTranslate()),t.setTransition(0),t.setTranslate(n),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses(),(!c&&t.isBeginning||!m&&t.isEnd)&&t.updateSlidesClasses(),t.params.loop&&t.loopFix({direction:e.direction<0?"next":"prev",byMousewheel:!0}),t.params.freeMode.sticky){clearTimeout(o),o=void 0,p.length>=15&&p.shift();const s=p.length?p[p.length-1]:void 0,a=p[0];if(p.push(e),s&&(e.delta>s.delta||e.direction!==s.direction))p.splice(0);else if(p.length>=15&&e.time-a.time<500&&a.delta-e.delta>=1&&e.delta<=6){const s=u>0?.8:.2;d=e,p.splice(0),o=(0,i.n)((()=>{!t.destroyed&&t.params&&t.slideToClosest(t.params.speed,!0,void 0,s)}),0)}o||(o=(0,i.n)((()=>{!t.destroyed&&t.params&&(d=e,p.splice(0),t.slideToClosest(t.params.speed,!0,void 0,.5))}),500))}if(a||l("scroll",s),t.params.autoplay&&t.params.autoplayDisableOnInteraction&&t.autoplay.stop(),r.releaseOnEdges&&(n===t.minTranslate()||n===t.maxTranslate()))return!0}}else{const s={time:(0,i.d)(),delta:Math.abs(u),direction:Math.sign(u),raw:e};p.length>=2&&p.shift();const a=p.length?p[p.length-1]:void 0;if(p.push(s),a?(s.direction!==a.direction||s.delta>a.delta||s.time>a.time+150)&&h(s):h(s),function(e){const s=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&s.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&s.releaseOnEdges)return!0;return!1}(s))return!0}return s.preventDefault?s.preventDefault():s.returnValue=!1,!1}function g(e){let s=t.el;"container"!==t.params.mousewheel.eventsTarget&&(s=document.querySelector(t.params.mousewheel.eventsTarget)),s[e]("mouseenter",u),s[e]("mouseleave",m),s[e]("wheel",f)}function v(){return t.params.cssMode?(t.wrapperEl.removeEventListener("wheel",f),!0):!t.mousewheel.enabled&&(g("addEventListener"),t.mousewheel.enabled=!0,!0)}function w(){return t.params.cssMode?(t.wrapperEl.addEventListener(event,f),!0):!!t.mousewheel.enabled&&(g("removeEventListener"),t.mousewheel.enabled=!1,!0)}r("init",(()=>{!t.params.mousewheel.enabled&&t.params.cssMode&&w(),t.params.mousewheel.enabled&&v()})),r("destroy",(()=>{t.params.cssMode&&v(),t.mousewheel.enabled&&w()})),Object.assign(t.mousewheel,{enable:v,disable:w})}},"./node_modules/swiper/modules/navigation.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/create-element-if-not-defined.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let{swiper:t,extendParams:s,on:r,emit:l}=e;function n(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e)||t.hostEl.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s&&s.length>1&&1===t.el.querySelectorAll(e).length?s=t.el.querySelector(e):s&&1===s.length&&(s=s[0])),e&&!s?e:s)}function o(e,s){const a=t.params.navigation;(e=(0,i.m)(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...a.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](a.lockClass))}))}function d(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return o(s,!1),void o(e,!1);o(s,t.isBeginning&&!t.params.rewind),o(e,t.isEnd&&!t.params.rewind)}function c(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),l("navigationPrev"))}function p(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),l("navigationNext"))}function u(){const e=t.params.navigation;if(t.params.navigation=(0,a.c)(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=n(e.nextEl),r=n(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:r}),s=(0,i.m)(s),r=(0,i.m)(r);const l=(s,a)=>{s&&s.addEventListener("click","next"===a?p:c),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>l(e,"next"))),r.forEach((e=>l(e,"prev")))}function m(){let{nextEl:e,prevEl:s}=t.navigation;e=(0,i.m)(e),s=(0,i.m)(s);const a=(e,s)=>{e.removeEventListener("click","next"===s?p:c),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>a(e,"next"))),s.forEach((e=>a(e,"prev")))}s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},r("init",(()=>{!1===t.params.navigation.enabled?h():(u(),d())})),r("toEdge fromEdge lock unlock",(()=>{d()})),r("destroy",(()=>{m()})),r("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=(0,i.m)(e),s=(0,i.m)(s),t.enabled?d():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),r("click",((e,s)=>{let{nextEl:a,prevEl:r}=t.navigation;a=(0,i.m)(a),r=(0,i.m)(r);const n=s.target;let o=r.includes(n)||a.includes(n);if(t.isElement&&!o){const e=s.path||s.composedPath&&s.composedPath();e&&(o=e.find((e=>a.includes(e)||r.includes(e))))}if(t.params.navigation.hideOnClick&&!o){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===n||t.pagination.el.contains(n)))return;let e;a.length?e=a[0].classList.contains(t.params.navigation.hiddenClass):r.length&&(e=r[0].classList.contains(t.params.navigation.hiddenClass)),l(!0===e?"navigationShow":"navigationHide"),[...a,...r].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const h=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),m()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),u(),d()},disable:h,update:d,init:u,destroy:m})}},"./node_modules/swiper/modules/pagination.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var a=s("./node_modules/swiper/shared/classes-to-selector.mjs"),i=s("./node_modules/swiper/shared/create-element-if-not-defined.mjs"),r=s("./node_modules/swiper/shared/utils.mjs");function l(e){let{swiper:t,extendParams:s,on:l,emit:n}=e;const o="swiper-pagination";let d;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${o}-bullet`,bulletActiveClass:`${o}-bullet-active`,modifierClass:`${o}-`,currentClass:`${o}-current`,totalClass:`${o}-total`,hiddenClass:`${o}-hidden`,progressbarFillClass:`${o}-progressbar-fill`,progressbarOppositeClass:`${o}-progressbar-opposite`,clickableClass:`${o}-clickable`,lockClass:`${o}-lock`,horizontalClass:`${o}-horizontal`,verticalClass:`${o}-vertical`,paginationDisabledClass:`${o}-disabled`}}),t.pagination={el:null,bullets:[]};let c=0;function p(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function u(e,s){const{bulletActiveClass:a}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${a}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${a}-${s}-${s}`))}function m(e){const s=e.target.closest((0,a.c)(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=(0,r.h)(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;const e=(l=t.realIndex,n=i,(n%=o=t.slides.length)==1+(l%=o)?"next":n===l-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(i)}else t.slideTo(i);var l,n,o}function h(){const e=t.rtl,s=t.params.pagination;if(p())return;let i,l,o=t.pagination.el;o=(0,r.m)(o);const m=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,h=t.params.loop?Math.ceil(m/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(l=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,l=t.previousSnapIndex):(l=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const a=t.pagination.bullets;let n,p,m;if(s.dynamicBullets&&(d=(0,r.f)(a[0],t.isHorizontal()?"width":"height",!0),o.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=d*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==l&&(c+=i-(l||0),c>s.dynamicMainBullets-1?c=s.dynamicMainBullets-1:c<0&&(c=0)),n=Math.max(i-c,0),p=n+(Math.min(a.length,s.dynamicMainBullets)-1),m=(p+n)/2),a.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),o.length>1)a.forEach((e=>{const a=(0,r.h)(e);a===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(a>=n&&a<=p&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),a===n&&u(e,"prev"),a===p&&u(e,"next"))}));else{const e=a[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&a.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=a[n],t=a[p];for(let e=n;e<=p;e+=1)a[e]&&a[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));u(e,"prev"),u(t,"next")}}if(s.dynamicBullets){const i=Math.min(a.length,s.dynamicMainBullets+4),r=(d*i-d)/2-m*d,l=e?"right":"left";a.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${r}px`}))}}o.forEach(((e,r)=>{if("fraction"===s.type&&(e.querySelectorAll((0,a.c)(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll((0,a.c)(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(h)}))),"progressbar"===s.type){let r;r=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const l=(i+1)/h;let n=1,o=1;"horizontal"===r?n=l:o=l,e.querySelectorAll((0,a.c)(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,h),0===r&&n("paginationRender",e)):(0===r&&n("paginationRender",e),n("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function f(){const e=t.params.pagination;if(p())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=(0,r.m)(i);let l="";if("bullets"===e.type){let a=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&a>s&&(a=s);for(let s=0;s<a;s+=1)e.renderBullet?l+=e.renderBullet.call(t,s,e.bulletClass):l+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(l=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(l=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=l||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll((0,a.c)(e.bulletClass)))})),"custom"!==e.type&&n("paginationRender",i[0])}function g(){t.params.pagination=(0,i.c)(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>(0,r.a)(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=(0,r.m)(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),c=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",m),t.enabled||s.classList.add(e.lockClass)})))}function v(){const e=t.params.pagination;if(p())return;let s=t.pagination.el;s&&(s=(0,r.m)(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",m))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}l("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=(0,r.m)(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),l("init",(()=>{!1===t.params.pagination.enabled?w():(g(),f(),h())})),l("activeIndexChange",(()=>{void 0===t.snapIndex&&h()})),l("snapIndexChange",(()=>{h()})),l("snapGridLengthChange",(()=>{f(),h()})),l("destroy",(()=>{v()})),l("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=(0,r.m)(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),l("lock unlock",(()=>{h()})),l("click",((e,s)=>{const a=s.target,i=(0,r.m)(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&i&&i.length>0&&!a.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&a===t.navigation.nextEl||t.navigation.prevEl&&a===t.navigation.prevEl))return;const e=i[0].classList.contains(t.params.pagination.hiddenClass);n(!0===e?"paginationShow":"paginationHide"),i.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const w=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,r.m)(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),v()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,r.m)(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),g(),f(),h()},disable:w,render:f,update:h,init:g,destroy:v})}},"./node_modules/swiper/modules/parallax.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var a=s("./node_modules/swiper/shared/utils.mjs");function i(e){let{swiper:t,extendParams:s,on:i}=e;s({parallax:{enabled:!1}});const r="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",l=(e,s)=>{const{rtl:a}=t,i=a?-1:1,r=e.getAttribute("data-swiper-parallax")||"0";let l=e.getAttribute("data-swiper-parallax-x"),n=e.getAttribute("data-swiper-parallax-y");const o=e.getAttribute("data-swiper-parallax-scale"),d=e.getAttribute("data-swiper-parallax-opacity"),c=e.getAttribute("data-swiper-parallax-rotate");if(l||n?(l=l||"0",n=n||"0"):t.isHorizontal()?(l=r,n="0"):(n=r,l="0"),l=l.indexOf("%")>=0?parseInt(l,10)*s*i+"%":l*s*i+"px",n=n.indexOf("%")>=0?parseInt(n,10)*s+"%":n*s+"px",null!=d){const t=d-(d-1)*(1-Math.abs(s));e.style.opacity=t}let p=`translate3d(${l}, ${n}, 0px)`;null!=o&&(p+=` scale(${o-(o-1)*(1-Math.abs(s))})`),c&&null!=c&&(p+=` rotate(${c*s*-1}deg)`),e.style.transform=p},n=()=>{const{el:e,slides:s,progress:i,snapGrid:n,isElement:o}=t,d=(0,a.e)(e,r);t.isElement&&d.push(...(0,a.e)(t.hostEl,r)),d.forEach((e=>{l(e,i)})),s.forEach(((e,s)=>{let a=e.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(a+=Math.ceil(s/2)-i*(n.length-1)),a=Math.min(Math.max(a,-1),1),e.querySelectorAll(`${r}, [data-swiper-parallax-rotate]`).forEach((e=>{l(e,a)}))}))};i("beforeInit",(()=>{t.params.parallax.enabled&&(t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)})),i("init",(()=>{t.params.parallax.enabled&&n()})),i("setTranslate",(()=>{t.params.parallax.enabled&&n()})),i("setTransition",((e,s)=>{t.params.parallax.enabled&&function(e){void 0===e&&(e=t.params.speed);const{el:s,hostEl:a}=t,i=[...s.querySelectorAll(r)];t.isElement&&i.push(...a.querySelectorAll(r)),i.forEach((t=>{let s=parseInt(t.getAttribute("data-swiper-parallax-duration"),10)||e;0===e&&(s=0),t.style.transitionDuration=`${s}ms`}))}(s)}))}},"./node_modules/swiper/modules/scrollbar.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs"),r=s("./node_modules/swiper/shared/create-element-if-not-defined.mjs"),l=s("./node_modules/swiper/shared/classes-to-selector.mjs");function n(e){let{swiper:t,extendParams:s,on:n,emit:o}=e;const d=(0,a.g)();let c,p,u,m,h=!1,f=null,g=null;function v(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e,rtlTranslate:s}=t,{dragEl:a,el:i}=e,r=t.params.scrollbar,l=t.params.loop?t.progressLoop:t.progress;let n=p,o=(u-p)*l;s?(o=-o,o>0?(n=p-o,o=0):-o+p>u&&(n=u+o)):o<0?(n=p+o,o=0):o+p>u&&(n=u-o),t.isHorizontal()?(a.style.transform=`translate3d(${o}px, 0, 0)`,a.style.width=`${n}px`):(a.style.transform=`translate3d(0px, ${o}px, 0)`,a.style.height=`${n}px`),r.hide&&(clearTimeout(f),i.style.opacity=1,f=setTimeout((()=>{i.style.opacity=0,i.style.transitionDuration="400ms"}),1e3))}function w(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e}=t,{dragEl:s,el:a}=e;s.style.width="",s.style.height="",u=t.isHorizontal()?a.offsetWidth:a.offsetHeight,m=t.size/(t.virtualSize+t.params.slidesOffsetBefore-(t.params.centeredSlides?t.snapGrid[0]:0)),p="auto"===t.params.scrollbar.dragSize?u*m:parseInt(t.params.scrollbar.dragSize,10),t.isHorizontal()?s.style.width=`${p}px`:s.style.height=`${p}px`,a.style.display=m>=1?"none":"",t.params.scrollbar.hide&&(a.style.opacity=0),t.params.watchOverflow&&t.enabled&&e.el.classList[t.isLocked?"add":"remove"](t.params.scrollbar.lockClass)}function b(e){return t.isHorizontal()?e.clientX:e.clientY}function y(e){const{scrollbar:s,rtlTranslate:a}=t,{el:r}=s;let l;l=(b(e)-(0,i.b)(r)[t.isHorizontal()?"left":"top"]-(null!==c?c:p/2))/(u-p),l=Math.max(Math.min(l,1),0),a&&(l=1-l);const n=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*l;t.updateProgress(n),t.setTranslate(n),t.updateActiveIndex(),t.updateSlidesClasses()}function E(e){const s=t.params.scrollbar,{scrollbar:a,wrapperEl:i}=t,{el:r,dragEl:l}=a;h=!0,c=e.target===l?b(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),i.style.transitionDuration="100ms",l.style.transitionDuration="100ms",y(e),clearTimeout(g),r.style.transitionDuration="0ms",s.hide&&(r.style.opacity=1),t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="none"),o("scrollbarDragStart",e)}function x(e){const{scrollbar:s,wrapperEl:a}=t,{el:i,dragEl:r}=s;h&&(e.preventDefault&&e.cancelable?e.preventDefault():e.returnValue=!1,y(e),a.style.transitionDuration="0ms",i.style.transitionDuration="0ms",r.style.transitionDuration="0ms",o("scrollbarDragMove",e))}function S(e){const s=t.params.scrollbar,{scrollbar:a,wrapperEl:r}=t,{el:l}=a;h&&(h=!1,t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="",r.style.transitionDuration=""),s.hide&&(clearTimeout(g),g=(0,i.n)((()=>{l.style.opacity=0,l.style.transitionDuration="400ms"}),1e3)),o("scrollbarDragEnd",e),s.snapOnRelease&&t.slideToClosest())}function T(e){const{scrollbar:s,params:a}=t,i=s.el;if(!i)return;const r=i,l=!!a.passiveListeners&&{passive:!1,capture:!1},n=!!a.passiveListeners&&{passive:!0,capture:!1};if(!r)return;const o="on"===e?"addEventListener":"removeEventListener";r[o]("pointerdown",E,l),d[o]("pointermove",x,l),d[o]("pointerup",S,n)}function M(){const{scrollbar:e,el:s}=t;t.params.scrollbar=(0,r.c)(t,t.originalParams.scrollbar,t.params.scrollbar,{el:"swiper-scrollbar"});const a=t.params.scrollbar;if(!a.el)return;let n,o;if("string"==typeof a.el&&t.isElement&&(n=t.el.querySelector(a.el)),n||"string"!=typeof a.el)n||(n=a.el);else if(n=d.querySelectorAll(a.el),!n.length)return;t.params.uniqueNavElements&&"string"==typeof a.el&&n.length>1&&1===s.querySelectorAll(a.el).length&&(n=s.querySelector(a.el)),n.length>0&&(n=n[0]),n.classList.add(t.isHorizontal()?a.horizontalClass:a.verticalClass),n&&(o=n.querySelector((0,l.c)(t.params.scrollbar.dragClass)),o||(o=(0,i.c)("div",t.params.scrollbar.dragClass),n.append(o))),Object.assign(e,{el:n,dragEl:o}),a.draggable&&t.params.scrollbar.el&&t.scrollbar.el&&T("on"),n&&n.classList[t.enabled?"remove":"add"](...(0,i.i)(t.params.scrollbar.lockClass))}function C(){const e=t.params.scrollbar,s=t.scrollbar.el;s&&s.classList.remove(...(0,i.i)(t.isHorizontal()?e.horizontalClass:e.verticalClass)),t.params.scrollbar.el&&t.scrollbar.el&&T("off")}s({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),t.scrollbar={el:null,dragEl:null},n("changeDirection",(()=>{if(!t.scrollbar||!t.scrollbar.el)return;const e=t.params.scrollbar;let{el:s}=t.scrollbar;s=(0,i.m)(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),n("init",(()=>{!1===t.params.scrollbar.enabled?P():(M(),w(),v())})),n("update resize observerUpdate lock unlock changeDirection",(()=>{w()})),n("setTranslate",(()=>{v()})),n("setTransition",((e,s)=>{!function(e){t.params.scrollbar.el&&t.scrollbar.el&&(t.scrollbar.dragEl.style.transitionDuration=`${e}ms`)}(s)})),n("enable disable",(()=>{const{el:e}=t.scrollbar;e&&e.classList[t.enabled?"remove":"add"](...(0,i.i)(t.params.scrollbar.lockClass))})),n("destroy",(()=>{C()}));const P=()=>{t.el.classList.add(...(0,i.i)(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.add(...(0,i.i)(t.params.scrollbar.scrollbarDisabledClass)),C()};Object.assign(t.scrollbar,{enable:()=>{t.el.classList.remove(...(0,i.i)(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.remove(...(0,i.i)(t.params.scrollbar.scrollbarDisabledClass)),M(),w(),v()},disable:P,updateSize:w,setTranslate:v,init:M,destroy:C})}},"./node_modules/swiper/modules/thumbs.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let{swiper:t,extendParams:s,on:r}=e;s({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let l=!1,n=!1;function o(){const e=t.thumbs.swiper;if(!e||e.destroyed)return;const s=e.clickedIndex,a=e.clickedSlide;if(a&&a.classList.contains(t.params.thumbs.slideThumbActiveClass))return;if(null==s)return;let i;i=e.params.loop?parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10):s,t.params.loop?t.slideToLoop(i):t.slideTo(i)}function d(){const{thumbs:e}=t.params;if(l)return!1;l=!0;const s=t.constructor;if(e.swiper instanceof s)t.thumbs.swiper=e.swiper,Object.assign(t.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(t.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper.update();else if((0,i.l)(e.swiper)){const a=Object.assign({},e.swiper);Object.assign(a,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper=new s(a),n=!0}return t.thumbs.swiper.el.classList.add(t.params.thumbs.thumbsContainerClass),t.thumbs.swiper.on("tap",o),!0}function c(e){const s=t.thumbs.swiper;if(!s||s.destroyed)return;const a="auto"===s.params.slidesPerView?s.slidesPerViewDynamic():s.params.slidesPerView;let r=1;const l=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(r=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),s.slides.forEach((e=>e.classList.remove(l))),s.params.loop||s.params.virtual&&s.params.virtual.enabled)for(let e=0;e<r;e+=1)(0,i.e)(s.slidesEl,`[data-swiper-slide-index="${t.realIndex+e}"]`).forEach((e=>{e.classList.add(l)}));else for(let e=0;e<r;e+=1)s.slides[t.realIndex+e]&&s.slides[t.realIndex+e].classList.add(l);const n=t.params.thumbs.autoScrollOffset,o=n&&!s.params.loop;if(t.realIndex!==s.realIndex||o){const i=s.activeIndex;let r,l;if(s.params.loop){const e=s.slides.filter((e=>e.getAttribute("data-swiper-slide-index")===`${t.realIndex}`))[0];r=s.slides.indexOf(e),l=t.activeIndex>t.previousIndex?"next":"prev"}else r=t.realIndex,l=r>t.previousIndex?"next":"prev";o&&(r+="next"===l?n:-1*n),s.visibleSlidesIndexes&&s.visibleSlidesIndexes.indexOf(r)<0&&(s.params.centeredSlides?r=r>i?r-Math.floor(a/2)+1:r+Math.floor(a/2)-1:r>i&&s.params.slidesPerGroup,s.slideTo(r,e?0:void 0))}}t.thumbs={swiper:null},r("beforeInit",(()=>{const{thumbs:e}=t.params;if(e&&e.swiper)if("string"==typeof e.swiper||e.swiper instanceof HTMLElement){const s=(0,a.g)(),i=()=>{const a="string"==typeof e.swiper?s.querySelector(e.swiper):e.swiper;if(a&&a.swiper)e.swiper=a.swiper,d(),c(!0);else if(a){const s=`${t.params.eventsPrefix}init`,i=r=>{e.swiper=r.detail[0],a.removeEventListener(s,i),d(),c(!0),e.swiper.update(),t.update()};a.addEventListener(s,i)}return a},r=()=>{t.destroyed||i()||requestAnimationFrame(r)};requestAnimationFrame(r)}else d(),c(!0)})),r("slideChange update resize observerUpdate",(()=>{c()})),r("setTransition",((e,s)=>{const a=t.thumbs.swiper;a&&!a.destroyed&&a.setTransition(s)})),r("beforeDestroy",(()=>{const e=t.thumbs.swiper;e&&!e.destroyed&&n&&e.destroy()})),Object.assign(t.thumbs,{init:d,update:c})}},"./node_modules/swiper/modules/virtual.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let t,{swiper:s,extendParams:r,on:l,emit:n}=e;r({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const o=(0,a.g)();s.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const d=o.createElement("div");function c(e,t){const a=s.params.virtual;if(a.cache&&s.virtual.cache[t])return s.virtual.cache[t];let r;return a.renderSlide?(r=a.renderSlide.call(s,e,t),"string"==typeof r&&(d.innerHTML=r,r=d.children[0])):r=s.isElement?(0,i.c)("swiper-slide"):(0,i.c)("div",s.params.slideClass),r.setAttribute("data-swiper-slide-index",t),a.renderSlide||(r.innerHTML=e),a.cache&&(s.virtual.cache[t]=r),r}function p(e,t){const{slidesPerView:a,slidesPerGroup:r,centeredSlides:l,loop:o,initialSlide:d}=s.params;if(t&&!o&&d>0)return;const{addSlidesBefore:p,addSlidesAfter:u}=s.params.virtual,{from:m,to:h,slides:f,slidesGrid:g,offset:v}=s.virtual;s.params.cssMode||s.updateActiveIndex();const w=s.activeIndex||0;let b,y,E;b=s.rtlTranslate?"right":s.isHorizontal()?"left":"top",l?(y=Math.floor(a/2)+r+u,E=Math.floor(a/2)+r+p):(y=a+(r-1)+u,E=(o?a:r)+p);let x=w-E,S=w+y;o||(x=Math.max(x,0),S=Math.min(S,f.length-1));let T=(s.slidesGrid[x]||0)-(s.slidesGrid[0]||0);function M(){s.updateSlides(),s.updateProgress(),s.updateSlidesClasses(),n("virtualUpdate")}if(o&&w>=E?(x-=E,l||(T+=s.slidesGrid[0])):o&&w<E&&(x=-E,l&&(T+=s.slidesGrid[0])),Object.assign(s.virtual,{from:x,to:S,offset:T,slidesGrid:s.slidesGrid,slidesBefore:E,slidesAfter:y}),m===x&&h===S&&!e)return s.slidesGrid!==g&&T!==v&&s.slides.forEach((e=>{e.style[b]=T-Math.abs(s.cssOverflowAdjustment())+"px"})),s.updateProgress(),void n("virtualUpdate");if(s.params.virtual.renderExternal)return s.params.virtual.renderExternal.call(s,{offset:T,from:x,to:S,slides:function(){const e=[];for(let t=x;t<=S;t+=1)e.push(f[t]);return e}()}),void(s.params.virtual.renderExternalUpdate?M():n("virtualUpdate"));const C=[],P=[],L=e=>{let t=e;return e<0?t=f.length+e:t>=f.length&&(t-=f.length),t};if(e)s.slides.filter((e=>e.matches(`.${s.params.slideClass}, swiper-slide`))).forEach((e=>{e.remove()}));else for(let e=m;e<=h;e+=1)if(e<x||e>S){const t=L(e);s.slides.filter((e=>e.matches(`.${s.params.slideClass}[data-swiper-slide-index="${t}"], swiper-slide[data-swiper-slide-index="${t}"]`))).forEach((e=>{e.remove()}))}const I=o?-f.length:0,z=o?2*f.length:f.length;for(let t=I;t<z;t+=1)if(t>=x&&t<=S){const s=L(t);void 0===h||e?P.push(s):(t>h&&P.push(s),t<m&&C.push(s))}if(P.forEach((e=>{s.slidesEl.append(c(f[e],e))})),o)for(let e=C.length-1;e>=0;e-=1){const t=C[e];s.slidesEl.prepend(c(f[t],t))}else C.sort(((e,t)=>t-e)),C.forEach((e=>{s.slidesEl.prepend(c(f[e],e))}));(0,i.e)(s.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[b]=T-Math.abs(s.cssOverflowAdjustment())+"px"})),M()}l("beforeInit",(()=>{if(!s.params.virtual.enabled)return;let e;if(void 0===s.passedParams.virtual.slides){const t=[...s.slidesEl.children].filter((e=>e.matches(`.${s.params.slideClass}, swiper-slide`)));t&&t.length&&(s.virtual.slides=[...t],e=!0,t.forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t),s.virtual.cache[t]=e,e.remove()})))}e||(s.virtual.slides=s.params.virtual.slides),s.classNames.push(`${s.params.containerModifierClass}virtual`),s.params.watchSlidesProgress=!0,s.originalParams.watchSlidesProgress=!0,p(!1,!0)})),l("setTranslate",(()=>{s.params.virtual.enabled&&(s.params.cssMode&&!s._immediateVirtual?(clearTimeout(t),t=setTimeout((()=>{p()}),100)):p())})),l("init update resize",(()=>{s.params.virtual.enabled&&s.params.cssMode&&(0,i.s)(s.wrapperEl,"--swiper-virtual-size",`${s.virtualSize}px`)})),Object.assign(s.virtual,{appendSlide:function(e){if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&s.virtual.slides.push(e[t]);else s.virtual.slides.push(e);p(!0)},prependSlide:function(e){const t=s.activeIndex;let a=t+1,i=1;if(Array.isArray(e)){for(let t=0;t<e.length;t+=1)e[t]&&s.virtual.slides.unshift(e[t]);a=t+e.length,i=e.length}else s.virtual.slides.unshift(e);if(s.params.virtual.cache){const e=s.virtual.cache,t={};Object.keys(e).forEach((s=>{const a=e[s],r=a.getAttribute("data-swiper-slide-index");r&&a.setAttribute("data-swiper-slide-index",parseInt(r,10)+i),t[parseInt(s,10)+i]=a})),s.virtual.cache=t}p(!0),s.slideTo(a,0)},removeSlide:function(e){if(null==e)return;let t=s.activeIndex;if(Array.isArray(e))for(let a=e.length-1;a>=0;a-=1)s.params.virtual.cache&&(delete s.virtual.cache[e[a]],Object.keys(s.virtual.cache).forEach((t=>{t>e&&(s.virtual.cache[t-1]=s.virtual.cache[t],s.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete s.virtual.cache[t])}))),s.virtual.slides.splice(e[a],1),e[a]<t&&(t-=1),t=Math.max(t,0);else s.params.virtual.cache&&(delete s.virtual.cache[e],Object.keys(s.virtual.cache).forEach((t=>{t>e&&(s.virtual.cache[t-1]=s.virtual.cache[t],s.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete s.virtual.cache[t])}))),s.virtual.slides.splice(e,1),e<t&&(t-=1),t=Math.max(t,0);p(!0),s.slideTo(t,0)},removeAllSlides:function(){s.virtual.slides=[],s.params.virtual.cache&&(s.virtual.cache={}),p(!0),s.slideTo(0,0)},update:p})}},"./node_modules/swiper/modules/zoom.mjs":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");function r(e){let{swiper:t,extendParams:s,on:r,emit:l}=e;const n=(0,a.a)();s({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),t.zoom={enabled:!1};let o,d,c=1,p=!1;const u=[],m={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},h={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},f={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let g,v=1;function w(){if(u.length<2)return 1;const e=u[0].pageX,t=u[0].pageY,s=u[1].pageX,a=u[1].pageY;return Math.sqrt((s-e)**2+(a-t)**2)}function b(){const e=t.params.zoom,s=m.imageWrapEl.getAttribute("data-swiper-zoom")||e.maxRatio;if(e.limitToOriginalSize&&m.imageEl&&m.imageEl.naturalWidth){const e=m.imageEl.naturalWidth/m.imageEl.offsetWidth;return Math.min(e,s)}return s}function y(e){const s=t.isElement?"swiper-slide":`.${t.params.slideClass}`;return!!e.target.matches(s)||t.slides.filter((t=>t.contains(e.target))).length>0}function E(e){if("mouse"===e.pointerType&&u.splice(0,u.length),!y(e))return;const s=t.params.zoom;if(o=!1,d=!1,u.push(e),!(u.length<2)){if(o=!0,m.scaleStart=w(),!m.slideEl){m.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`),m.slideEl||(m.slideEl=t.slides[t.activeIndex]);let a=m.slideEl.querySelector(`.${s.containerClass}`);if(a&&(a=a.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),m.imageEl=a,m.imageWrapEl=a?(0,i.a)(m.imageEl,`.${s.containerClass}`)[0]:void 0,!m.imageWrapEl)return void(m.imageEl=void 0);m.maxRatio=b()}if(m.imageEl){const[e,t]=function(){if(u.length<2)return{x:null,y:null};const e=m.imageEl.getBoundingClientRect();return[(u[0].pageX+(u[1].pageX-u[0].pageX)/2-e.x-n.scrollX)/c,(u[0].pageY+(u[1].pageY-u[0].pageY)/2-e.y-n.scrollY)/c]}();m.originX=e,m.originY=t,m.imageEl.style.transitionDuration="0ms"}p=!0}}function x(e){if(!y(e))return;const s=t.params.zoom,a=t.zoom,i=u.findIndex((t=>t.pointerId===e.pointerId));i>=0&&(u[i]=e),u.length<2||(d=!0,m.scaleMove=w(),m.imageEl&&(a.scale=m.scaleMove/m.scaleStart*c,a.scale>m.maxRatio&&(a.scale=m.maxRatio-1+(a.scale-m.maxRatio+1)**.5),a.scale<s.minRatio&&(a.scale=s.minRatio+1-(s.minRatio-a.scale+1)**.5),m.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`))}function S(e){if(!y(e))return;if("mouse"===e.pointerType&&"pointerout"===e.type)return;const s=t.params.zoom,a=t.zoom,i=u.findIndex((t=>t.pointerId===e.pointerId));i>=0&&u.splice(i,1),o&&d&&(o=!1,d=!1,m.imageEl&&(a.scale=Math.max(Math.min(a.scale,m.maxRatio),s.minRatio),m.imageEl.style.transitionDuration=`${t.params.speed}ms`,m.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`,c=a.scale,p=!1,a.scale>1&&m.slideEl?m.slideEl.classList.add(`${s.zoomedSlideClass}`):a.scale<=1&&m.slideEl&&m.slideEl.classList.remove(`${s.zoomedSlideClass}`),1===a.scale&&(m.originX=0,m.originY=0,m.slideEl=void 0)))}function T(){t.touchEventsData.preventTouchMoveFromPointerMove=!1}function M(e){if(!y(e)||!function(e){const s=`.${t.params.zoom.containerClass}`;return!!e.target.matches(s)||[...t.hostEl.querySelectorAll(s)].filter((t=>t.contains(e.target))).length>0}(e))return;const s=t.zoom;if(!m.imageEl)return;if(!h.isTouched||!m.slideEl)return;h.isMoved||(h.width=m.imageEl.offsetWidth||m.imageEl.clientWidth,h.height=m.imageEl.offsetHeight||m.imageEl.clientHeight,h.startX=(0,i.j)(m.imageWrapEl,"x")||0,h.startY=(0,i.j)(m.imageWrapEl,"y")||0,m.slideWidth=m.slideEl.offsetWidth,m.slideHeight=m.slideEl.offsetHeight,m.imageWrapEl.style.transitionDuration="0ms");const a=h.width*s.scale,r=h.height*s.scale;if(h.minX=Math.min(m.slideWidth/2-a/2,0),h.maxX=-h.minX,h.minY=Math.min(m.slideHeight/2-r/2,0),h.maxY=-h.minY,h.touchesCurrent.x=u.length>0?u[0].pageX:e.pageX,h.touchesCurrent.y=u.length>0?u[0].pageY:e.pageY,Math.max(Math.abs(h.touchesCurrent.x-h.touchesStart.x),Math.abs(h.touchesCurrent.y-h.touchesStart.y))>5&&(t.allowClick=!1),!h.isMoved&&!p){if(t.isHorizontal()&&(Math.floor(h.minX)===Math.floor(h.startX)&&h.touchesCurrent.x<h.touchesStart.x||Math.floor(h.maxX)===Math.floor(h.startX)&&h.touchesCurrent.x>h.touchesStart.x))return h.isTouched=!1,void T();if(!t.isHorizontal()&&(Math.floor(h.minY)===Math.floor(h.startY)&&h.touchesCurrent.y<h.touchesStart.y||Math.floor(h.maxY)===Math.floor(h.startY)&&h.touchesCurrent.y>h.touchesStart.y))return h.isTouched=!1,void T()}e.cancelable&&e.preventDefault(),e.stopPropagation(),clearTimeout(g),t.touchEventsData.preventTouchMoveFromPointerMove=!0,g=setTimeout((()=>{t.destroyed||T()})),h.isMoved=!0;const l=(s.scale-c)/(m.maxRatio-t.params.zoom.minRatio),{originX:n,originY:o}=m;h.currentX=h.touchesCurrent.x-h.touchesStart.x+h.startX+l*(h.width-2*n),h.currentY=h.touchesCurrent.y-h.touchesStart.y+h.startY+l*(h.height-2*o),h.currentX<h.minX&&(h.currentX=h.minX+1-(h.minX-h.currentX+1)**.8),h.currentX>h.maxX&&(h.currentX=h.maxX-1+(h.currentX-h.maxX+1)**.8),h.currentY<h.minY&&(h.currentY=h.minY+1-(h.minY-h.currentY+1)**.8),h.currentY>h.maxY&&(h.currentY=h.maxY-1+(h.currentY-h.maxY+1)**.8),f.prevPositionX||(f.prevPositionX=h.touchesCurrent.x),f.prevPositionY||(f.prevPositionY=h.touchesCurrent.y),f.prevTime||(f.prevTime=Date.now()),f.x=(h.touchesCurrent.x-f.prevPositionX)/(Date.now()-f.prevTime)/2,f.y=(h.touchesCurrent.y-f.prevPositionY)/(Date.now()-f.prevTime)/2,Math.abs(h.touchesCurrent.x-f.prevPositionX)<2&&(f.x=0),Math.abs(h.touchesCurrent.y-f.prevPositionY)<2&&(f.y=0),f.prevPositionX=h.touchesCurrent.x,f.prevPositionY=h.touchesCurrent.y,f.prevTime=Date.now(),m.imageWrapEl.style.transform=`translate3d(${h.currentX}px, ${h.currentY}px,0)`}function C(){const e=t.zoom;m.slideEl&&t.activeIndex!==t.slides.indexOf(m.slideEl)&&(m.imageEl&&(m.imageEl.style.transform="translate3d(0,0,0) scale(1)"),m.imageWrapEl&&(m.imageWrapEl.style.transform="translate3d(0,0,0)"),m.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`),e.scale=1,c=1,m.slideEl=void 0,m.imageEl=void 0,m.imageWrapEl=void 0,m.originX=0,m.originY=0)}function P(e){const s=t.zoom,a=t.params.zoom;if(!m.slideEl){e&&e.target&&(m.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`)),m.slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?m.slideEl=(0,i.e)(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:m.slideEl=t.slides[t.activeIndex]);let s=m.slideEl.querySelector(`.${a.containerClass}`);s&&(s=s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),m.imageEl=s,m.imageWrapEl=s?(0,i.a)(m.imageEl,`.${a.containerClass}`)[0]:void 0}if(!m.imageEl||!m.imageWrapEl)return;let r,l,o,d,p,u,f,g,v,w,y,E,x,S,T,M,C,P;t.params.cssMode&&(t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.touchAction="none"),m.slideEl.classList.add(`${a.zoomedSlideClass}`),void 0===h.touchesStart.x&&e?(r=e.pageX,l=e.pageY):(r=h.touchesStart.x,l=h.touchesStart.y);const L="number"==typeof e?e:null;1===c&&L&&(r=void 0,l=void 0,h.touchesStart.x=void 0,h.touchesStart.y=void 0);const I=b();s.scale=L||I,c=L||I,!e||1===c&&L?(f=0,g=0):(C=m.slideEl.offsetWidth,P=m.slideEl.offsetHeight,o=(0,i.b)(m.slideEl).left+n.scrollX,d=(0,i.b)(m.slideEl).top+n.scrollY,p=o+C/2-r,u=d+P/2-l,v=m.imageEl.offsetWidth||m.imageEl.clientWidth,w=m.imageEl.offsetHeight||m.imageEl.clientHeight,y=v*s.scale,E=w*s.scale,x=Math.min(C/2-y/2,0),S=Math.min(P/2-E/2,0),T=-x,M=-S,f=p*s.scale,g=u*s.scale,f<x&&(f=x),f>T&&(f=T),g<S&&(g=S),g>M&&(g=M)),L&&1===s.scale&&(m.originX=0,m.originY=0),m.imageWrapEl.style.transitionDuration="300ms",m.imageWrapEl.style.transform=`translate3d(${f}px, ${g}px,0)`,m.imageEl.style.transitionDuration="300ms",m.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`}function L(){const e=t.zoom,s=t.params.zoom;if(!m.slideEl){t.params.virtual&&t.params.virtual.enabled&&t.virtual?m.slideEl=(0,i.e)(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:m.slideEl=t.slides[t.activeIndex];let e=m.slideEl.querySelector(`.${s.containerClass}`);e&&(e=e.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),m.imageEl=e,m.imageWrapEl=e?(0,i.a)(m.imageEl,`.${s.containerClass}`)[0]:void 0}m.imageEl&&m.imageWrapEl&&(t.params.cssMode&&(t.wrapperEl.style.overflow="",t.wrapperEl.style.touchAction=""),e.scale=1,c=1,h.touchesStart.x=void 0,h.touchesStart.y=void 0,m.imageWrapEl.style.transitionDuration="300ms",m.imageWrapEl.style.transform="translate3d(0,0,0)",m.imageEl.style.transitionDuration="300ms",m.imageEl.style.transform="translate3d(0,0,0) scale(1)",m.slideEl.classList.remove(`${s.zoomedSlideClass}`),m.slideEl=void 0,m.originX=0,m.originY=0)}function I(e){const s=t.zoom;s.scale&&1!==s.scale?L():P(e)}function z(){return{passiveListener:!!t.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!t.params.passiveListeners||{passive:!1,capture:!0}}}function A(){const e=t.zoom;if(e.enabled)return;e.enabled=!0;const{passiveListener:s,activeListenerWithCapture:a}=z();t.wrapperEl.addEventListener("pointerdown",E,s),t.wrapperEl.addEventListener("pointermove",x,a),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.addEventListener(e,S,s)})),t.wrapperEl.addEventListener("pointermove",M,a)}function k(){const e=t.zoom;if(!e.enabled)return;e.enabled=!1;const{passiveListener:s,activeListenerWithCapture:a}=z();t.wrapperEl.removeEventListener("pointerdown",E,s),t.wrapperEl.removeEventListener("pointermove",x,a),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.removeEventListener(e,S,s)})),t.wrapperEl.removeEventListener("pointermove",M,a)}Object.defineProperty(t.zoom,"scale",{get:()=>v,set(e){if(v!==e){const t=m.imageEl,s=m.slideEl;l("zoomChange",e,t,s)}v=e}}),r("init",(()=>{t.params.zoom.enabled&&A()})),r("destroy",(()=>{k()})),r("touchStart",((e,s)=>{t.zoom.enabled&&function(e){const s=t.device;if(!m.imageEl)return;if(h.isTouched)return;s.android&&e.cancelable&&e.preventDefault(),h.isTouched=!0;const a=u.length>0?u[0]:e;h.touchesStart.x=a.pageX,h.touchesStart.y=a.pageY}(s)})),r("touchEnd",((e,s)=>{t.zoom.enabled&&function(){const e=t.zoom;if(!m.imageEl)return;if(!h.isTouched||!h.isMoved)return h.isTouched=!1,void(h.isMoved=!1);h.isTouched=!1,h.isMoved=!1;let s=300,a=300;const i=f.x*s,r=h.currentX+i,l=f.y*a,n=h.currentY+l;0!==f.x&&(s=Math.abs((r-h.currentX)/f.x)),0!==f.y&&(a=Math.abs((n-h.currentY)/f.y));const o=Math.max(s,a);h.currentX=r,h.currentY=n;const d=h.width*e.scale,c=h.height*e.scale;h.minX=Math.min(m.slideWidth/2-d/2,0),h.maxX=-h.minX,h.minY=Math.min(m.slideHeight/2-c/2,0),h.maxY=-h.minY,h.currentX=Math.max(Math.min(h.currentX,h.maxX),h.minX),h.currentY=Math.max(Math.min(h.currentY,h.maxY),h.minY),m.imageWrapEl.style.transitionDuration=`${o}ms`,m.imageWrapEl.style.transform=`translate3d(${h.currentX}px, ${h.currentY}px,0)`}()})),r("doubleTap",((e,s)=>{!t.animating&&t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&I(s)})),r("transitionEnd",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&C()})),r("slideChange",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&t.params.cssMode&&C()})),Object.assign(t.zoom,{enable:A,disable:k,in:P,out:L,toggle:I})}},"./node_modules/swiper/shared/classes-to-selector.mjs":(e,t,s)=>{function a(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}s.r(t),s.d(t,{c:()=>a})},"./node_modules/swiper/shared/create-element-if-not-defined.mjs":(e,t,s)=>{s.r(t),s.d(t,{c:()=>i});var a=s("./node_modules/swiper/shared/utils.mjs");function i(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((r=>{if(!s[r]&&!0===s.auto){let l=(0,a.e)(e.el,`.${i[r]}`)[0];l||(l=(0,a.c)("div",i[r]),l.className=i[r],e.el.append(l)),s[r]=l,t[r]=l}})),s}},"./node_modules/swiper/shared/create-shadow.mjs":(e,t,s)=>{s.r(t),s.d(t,{c:()=>i});var a=s("./node_modules/swiper/shared/utils.mjs");function i(e,t,s){const i=`swiper-slide-shadow${s?`-${s}`:""}${e?` swiper-slide-shadow-${e}`:""}`,r=(0,a.g)(t);let l=r.querySelector(`.${i.split(" ").join(".")}`);return l||(l=(0,a.c)("div",i.split(" ")),r.append(l)),l}},"./node_modules/swiper/shared/effect-init.mjs":(e,t,s)=>{function a(e){const{effect:t,swiper:s,on:a,setTranslate:i,setTransition:r,overwriteParams:l,perspective:n,recreateShadows:o,getEffectParams:d}=e;let c;a("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),n&&n()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=l?l():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),a("setTranslate",(()=>{s.params.effect===t&&i()})),a("setTransition",((e,a)=>{s.params.effect===t&&r(a)})),a("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!d||!d().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),a("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(c=!0),requestAnimationFrame((()=>{c&&s.slides&&s.slides.length&&(i(),c=!1)})))}))}s.r(t),s.d(t,{e:()=>a})},"./node_modules/swiper/shared/effect-target.mjs":(e,t,s)=>{s.r(t),s.d(t,{e:()=>i});var a=s("./node_modules/swiper/shared/utils.mjs");function i(e,t){const s=(0,a.g)(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}},"./node_modules/swiper/shared/effect-virtual-transition-end.mjs":(e,t,s)=>{s.r(t),s.d(t,{e:()=>i});var a=s("./node_modules/swiper/shared/utils.mjs");function i(e){let{swiper:t,duration:s,transformElements:i,allSlides:r}=e;const{activeIndex:l}=t;if(t.params.virtualTranslate&&0!==s){let e,s=!1;e=r?i:i.filter((e=>{const s=e.classList.contains("swiper-slide-transform")?(e=>e.parentElement?e.parentElement:t.slides.filter((t=>t.shadowRoot&&t.shadowRoot===e.parentNode))[0])(e):e;return t.getSlideIndex(s)===l})),e.forEach((e=>{(0,a.k)(e,(()=>{if(s)return;if(!t||t.destroyed)return;s=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}},"./node_modules/swiper/shared/ssr-window.esm.mjs":(e,t,s)=>{function a(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:a(t[s])&&a(e[s])&&Object.keys(t[s]).length>0&&i(e[s],t[s])}))}s.r(t),s.d(t,{a:()=>o,g:()=>l});const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function l(){const e="undefined"!=typeof document?document:{};return i(e,r),e}const n={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){const e="undefined"!=typeof window?window:{};return i(e,n),e}},"./node_modules/swiper/shared/swiper-core.mjs":(e,t,s)=>{s.r(t),s.d(t,{S:()=>_,d:()=>A});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs"),i=s("./node_modules/swiper/shared/utils.mjs");let r,l,n;function o(){return r||(r=function(){const e=(0,a.a)(),t=(0,a.g)();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),r}function d(e){return void 0===e&&(e={}),l||(l=function(e){let{userAgent:t}=void 0===e?{}:e;const s=o(),i=(0,a.a)(),r=i.navigator.platform,l=t||i.navigator.userAgent,n={ios:!1,android:!1},d=i.screen.width,c=i.screen.height,p=l.match(/(Android);?[\s\/]+([\d.]+)?/);let u=l.match(/(iPad).*OS\s([\d_]+)/);const m=l.match(/(iPod)(.*OS\s([\d_]+))?/),h=!u&&l.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===r;let g="MacIntel"===r;return!u&&g&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${d}x${c}`)>=0&&(u=l.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),g=!1),p&&!f&&(n.os="android",n.android=!0),(u||h||m)&&(n.os="ios",n.ios=!0),n}(e)),l}var c={on(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;const i=s?"unshift":"push";return e.split(" ").forEach((e=>{a.eventsListeners[e]||(a.eventsListeners[e]=[]),a.eventsListeners[e][i](t)})),a},once(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;function i(){a.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var s=arguments.length,r=new Array(s),l=0;l<s;l++)r[l]=arguments[l];t.apply(a,r)}return i.__emitterProxy=t,a.on(e,i,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const a=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[a](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((a,i)=>{(a===t||a.__emitterProxy&&a.__emitterProxy===t)&&s.eventsListeners[e].splice(i,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,a;for(var i=arguments.length,r=new Array(i),l=0;l<i;l++)r[l]=arguments[l];return"string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],s=r.slice(1,r.length),a=e):(t=r[0].events,s=r[0].data,a=r[0].context||e),s.unshift(a),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(a,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(a,s)}))})),e}};const p=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)},u=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)},m=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},h=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},f=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const a="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=i,r=[s-t];return r.push(...Array.from({length:t}).map(((e,t)=>s+a+t))),void e.slides.forEach(((t,s)=>{r.includes(t.column)&&h(e,s)}))}const r=i+a-1;if(e.params.rewind||e.params.loop)for(let a=i-t;a<=r+t;a+=1){const t=(a%s+s)%s;(t<i||t>r)&&h(e,t)}else for(let a=Math.max(i-t,0);a<=Math.min(r+t,s-1);a+=1)a!==i&&(a>r||a<i)&&h(e,a)};var g={updateSize:function(){const e=this;let t,s;const a=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:a.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:a.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt((0,i.p)(a,"padding-left")||0,10)-parseInt((0,i.p)(a,"padding-right")||0,10),s=s-parseInt((0,i.p)(a,"padding-top")||0,10)-parseInt((0,i.p)(a,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:a,slidesEl:r,size:l,rtlTranslate:n,wrongRTL:o}=e,d=e.virtual&&s.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=(0,i.e)(r,`.${e.params.slideClass}, swiper-slide`),u=d?e.virtual.slides.length:p.length;let m=[];const h=[],f=[];let g=s.slidesOffsetBefore;"function"==typeof g&&(g=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const w=e.snapGrid.length,b=e.slidesGrid.length;let y=s.spaceBetween,E=-g,x=0,S=0;if(void 0===l)return;"string"==typeof y&&y.indexOf("%")>=0?y=parseFloat(y.replace("%",""))/100*l:"string"==typeof y&&(y=parseFloat(y)),e.virtualSize=-y,p.forEach((e=>{n?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&((0,i.s)(a,"--swiper-centered-offset-before",""),(0,i.s)(a,"--swiper-centered-offset-after",""));const T=s.grid&&s.grid.rows>1&&e.grid;let M;T?e.grid.initSlides(p):e.grid&&e.grid.unsetSlides();const C="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let a=0;a<u;a+=1){let r;if(M=0,p[a]&&(r=p[a]),T&&e.grid.updateSlide(a,r,p),!p[a]||"none"!==(0,i.p)(r,"display")){if("auto"===s.slidesPerView){C&&(p[a].style[e.getDirectionLabel("width")]="");const l=getComputedStyle(r),n=r.style.transform,o=r.style.webkitTransform;if(n&&(r.style.transform="none"),o&&(r.style.webkitTransform="none"),s.roundLengths)M=e.isHorizontal()?(0,i.f)(r,"width",!0):(0,i.f)(r,"height",!0);else{const e=t(l,"width"),s=t(l,"padding-left"),a=t(l,"padding-right"),i=t(l,"margin-left"),n=t(l,"margin-right"),o=l.getPropertyValue("box-sizing");if(o&&"border-box"===o)M=e+i+n;else{const{clientWidth:t,offsetWidth:l}=r;M=e+s+a+i+n+(l-t)}}n&&(r.style.transform=n),o&&(r.style.webkitTransform=o),s.roundLengths&&(M=Math.floor(M))}else M=(l-(s.slidesPerView-1)*y)/s.slidesPerView,s.roundLengths&&(M=Math.floor(M)),p[a]&&(p[a].style[e.getDirectionLabel("width")]=`${M}px`);p[a]&&(p[a].swiperSlideSize=M),f.push(M),s.centeredSlides?(E=E+M/2+x/2+y,0===x&&0!==a&&(E=E-l/2-y),0===a&&(E=E-l/2-y),Math.abs(E)<.001&&(E=0),s.roundLengths&&(E=Math.floor(E)),S%s.slidesPerGroup==0&&m.push(E),h.push(E)):(s.roundLengths&&(E=Math.floor(E)),(S-Math.min(e.params.slidesPerGroupSkip,S))%e.params.slidesPerGroup==0&&m.push(E),h.push(E),E=E+M+y),e.virtualSize+=M+y,x=M,S+=1}}if(e.virtualSize=Math.max(e.virtualSize,l)+v,n&&o&&("slide"===s.effect||"coverflow"===s.effect)&&(a.style.width=`${e.virtualSize+y}px`),s.setWrapperSize&&(a.style[e.getDirectionLabel("width")]=`${e.virtualSize+y}px`),T&&e.grid.updateWrapperSize(M,m),!s.centeredSlides){const t=[];for(let a=0;a<m.length;a+=1){let i=m[a];s.roundLengths&&(i=Math.floor(i)),m[a]<=e.virtualSize-l&&t.push(i)}m=t,Math.floor(e.virtualSize-l)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-l)}if(d&&s.loop){const t=f[0]+y;if(s.slidesPerGroup>1){const a=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),i=t*s.slidesPerGroup;for(let e=0;e<a;e+=1)m.push(m[m.length-1]+i)}for(let a=0;a<e.virtual.slidesBefore+e.virtual.slidesAfter;a+=1)1===s.slidesPerGroup&&m.push(m[m.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==y){const t=e.isHorizontal()&&n?"marginLeft":e.getDirectionLabel("marginRight");p.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==p.length-1)).forEach((e=>{e.style[t]=`${y}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;f.forEach((t=>{e+=t+(y||0)})),e-=y;const t=e>l?e-l:0;m=m.map((e=>e<=0?-g:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;f.forEach((t=>{e+=t+(y||0)})),e-=y;const t=(s.slidesOffsetBefore||0)+(s.slidesOffsetAfter||0);if(e+t<l){const s=(l-e-t)/2;m.forEach(((e,t)=>{m[t]=e-s})),h.forEach(((e,t)=>{h[t]=e+s}))}}if(Object.assign(e,{slides:p,snapGrid:m,slidesGrid:h,slidesSizesGrid:f}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){(0,i.s)(a,"--swiper-centered-offset-before",-m[0]+"px"),(0,i.s)(a,"--swiper-centered-offset-after",e.size/2-f[f.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),m.length!==w&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(d||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,a=e.el.classList.contains(t);u<=s.maxBackfaceHiddenSlides?a||e.el.classList.add(t):a&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],a=t.virtual&&t.params.virtual.enabled;let i,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const l=e=>a?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!a)break;s.push(l(e))}else s.push(l(t.activeIndex));for(i=0;i<s.length;i+=1)if(void 0!==s[i]){const e=s[i].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let a=0;a<t.length;a+=1)t[a].swiperSlideOffset=(e.isHorizontal()?t[a].offsetLeft:t[a].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:a,rtlTranslate:i,snapGrid:r}=t;if(0===a.length)return;void 0===a[0].swiperSlideOffset&&t.updateSlidesOffset();let l=-e;i&&(l=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let n=s.spaceBetween;"string"==typeof n&&n.indexOf("%")>=0?n=parseFloat(n.replace("%",""))/100*t.size:"string"==typeof n&&(n=parseFloat(n));for(let e=0;e<a.length;e+=1){const o=a[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=a[0].swiperSlideOffset);const c=(l+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+n),u=(l-r[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+n),m=-(l-d),h=m+t.slidesSizesGrid[e],f=m>=0&&m<=t.size-t.slidesSizesGrid[e],g=m>=0&&m<t.size-1||h>1&&h<=t.size||m<=0&&h>=t.size;g&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),p(o,g,s.slideVisibleClass),p(o,f,s.slideFullyVisibleClass),o.progress=i?-c:c,o.originalProgress=i?-u:u}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,a=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:r,isEnd:l,progressLoop:n}=t;const o=r,d=l;if(0===a)i=0,r=!0,l=!0;else{i=(e-t.minTranslate())/a;const s=Math.abs(e-t.minTranslate())<1,n=Math.abs(e-t.maxTranslate())<1;r=s||i<=0,l=n||i>=1,s&&(i=0),n&&(i=1)}if(s.loop){const s=t.getSlideIndexByData(0),a=t.getSlideIndexByData(t.slides.length-1),i=t.slidesGrid[s],r=t.slidesGrid[a],l=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);n=o>=i?(o-i)/l:(o+l-r)/l,n>1&&(n-=1)}Object.assign(t,{progress:i,progressLoop:n,isBeginning:r,isEnd:l}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),l&&!d&&t.emit("reachEnd toEdge"),(o&&!r||d&&!l)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:a,activeIndex:r}=e,l=e.virtual&&s.virtual.enabled,n=e.grid&&s.grid&&s.grid.rows>1,o=e=>(0,i.e)(a,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let d,c,p;if(l)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),d=o(`[data-swiper-slide-index="${t}"]`)}else d=o(`[data-swiper-slide-index="${r}"]`);else n?(d=t.filter((e=>e.column===r))[0],p=t.filter((e=>e.column===r+1))[0],c=t.filter((e=>e.column===r-1))[0]):d=t[r];d&&(n||(p=(0,i.q)(d,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!p&&(p=t[0]),c=(0,i.r)(d,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!c&&(c=t[t.length-1]))),t.forEach((e=>{u(e,e===d,s.slideActiveClass),u(e,e===p,s.slideNextClass),u(e,e===c,s.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:a,params:i,activeIndex:r,realIndex:l,snapIndex:n}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,a=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?a>=t[e]&&a<t[e+1]-(t[e+1]-t[e])/2?i=e:a>=t[e]&&a<t[e+1]&&(i=e+1):a>=t[e]&&(i=e);return s.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),a.indexOf(s)>=0)o=a.indexOf(s);else{const e=Math.min(i.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/i.slidesPerGroup)}if(o>=a.length&&(o=a.length-1),d===r&&!t.params.loop)return void(o!==n&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===r&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&i.grid&&i.grid.rows>1;let u;if(t.virtual&&i.virtual.enabled&&i.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/i.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:n,snapIndex:o,previousRealIndex:l,realIndex:u,previousIndex:r,activeIndex:d}),t.initialized&&f(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(l!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,a=s.params;let i=e.closest(`.${a.slideClass}, swiper-slide`);!i&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!i&&e.matches&&e.matches(`.${a.slideClass}, swiper-slide`)&&(i=e)}));let r,l=!1;if(i)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===i){l=!0,r=e;break}if(!i||!l)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=i,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=r,a.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};function v(e){let{swiper:t,runCallbacks:s,direction:a,step:i}=e;const{activeIndex:r,previousIndex:l}=t;let n=a;if(n||(n=r>l?"next":r<l?"prev":"reset"),t.emit(`transition${i}`),s&&r!==l){if("reset"===n)return void t.emit(`slideResetTransition${i}`);t.emit(`slideChangeTransition${i}`),"next"===n?t.emit(`slideNextTransition${i}`):t.emit(`slidePrevTransition${i}`)}}var w={slideTo:function(e,t,s,a,r){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const l=this;let n=e;n<0&&(n=0);const{params:o,snapGrid:d,slidesGrid:c,previousIndex:p,activeIndex:u,rtlTranslate:m,wrapperEl:h,enabled:f}=l;if(!f&&!a&&!r||l.destroyed||l.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=l.params.speed);const g=Math.min(l.params.slidesPerGroupSkip,n);let v=g+Math.floor((n-g)/l.params.slidesPerGroup);v>=d.length&&(v=d.length-1);const w=-d[v];if(o.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*c[e]),a=Math.floor(100*c[e+1]);void 0!==c[e+1]?t>=s&&t<a-(a-s)/2?n=e:t>=s&&t<a&&(n=e+1):t>=s&&(n=e)}if(l.initialized&&n!==u){if(!l.allowSlideNext&&(m?w>l.translate&&w>l.minTranslate():w<l.translate&&w<l.minTranslate()))return!1;if(!l.allowSlidePrev&&w>l.translate&&w>l.maxTranslate()&&(u||0)!==n)return!1}let b;n!==(p||0)&&s&&l.emit("beforeSlideChangeStart"),l.updateProgress(w),b=n>u?"next":n<u?"prev":"reset";const y=l.virtual&&l.params.virtual.enabled;if((!y||!r)&&(m&&-w===l.translate||!m&&w===l.translate))return l.updateActiveIndex(n),o.autoHeight&&l.updateAutoHeight(),l.updateSlidesClasses(),"slide"!==o.effect&&l.setTranslate(w),"reset"!==b&&(l.transitionStart(s,b),l.transitionEnd(s,b)),!1;if(o.cssMode){const e=l.isHorizontal(),s=m?w:-w;if(0===t)y&&(l.wrapperEl.style.scrollSnapType="none",l._immediateVirtual=!0),y&&!l._cssModeVirtualInitialSet&&l.params.initialSlide>0?(l._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=s}))):h[e?"scrollLeft":"scrollTop"]=s,y&&requestAnimationFrame((()=>{l.wrapperEl.style.scrollSnapType="",l._immediateVirtual=!1}));else{if(!l.support.smoothScroll)return(0,i.t)({swiper:l,targetPosition:s,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return l.setTransition(t),l.setTranslate(w),l.updateActiveIndex(n),l.updateSlidesClasses(),l.emit("beforeTransitionStart",t,a),l.transitionStart(s,b),0===t?l.transitionEnd(s,b):l.animating||(l.animating=!0,l.onSlideToWrapperTransitionEnd||(l.onSlideToWrapperTransitionEnd=function(e){l&&!l.destroyed&&e.target===this&&(l.wrapperEl.removeEventListener("transitionend",l.onSlideToWrapperTransitionEnd),l.onSlideToWrapperTransitionEnd=null,delete l.onSlideToWrapperTransitionEnd,l.transitionEnd(s,b))}),l.wrapperEl.addEventListener("transitionend",l.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,a){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;if(i.destroyed)return;void 0===t&&(t=i.params.speed);const r=i.grid&&i.params.grid&&i.params.grid.rows>1;let l=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)l+=i.virtual.slidesBefore;else{let e;if(r){const t=l*i.params.grid.rows;e=i.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=i.getSlideIndexByData(l);const t=r?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:s}=i.params;let n=i.params.slidesPerView;"auto"===n?n=i.slidesPerViewDynamic():(n=Math.ceil(parseFloat(i.params.slidesPerView,10)),s&&n%2==0&&(n+=1));let o=t-e<n;if(s&&(o=o||e<Math.ceil(n/2)),a&&s&&"auto"!==i.params.slidesPerView&&!r&&(o=!1),o){const a=s?e<i.activeIndex?"prev":"next":e-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:a,slideTo:!0,activeSlideIndex:"next"===a?e+1:e-t+1,slideRealIndex:"next"===a?i.realIndex:void 0})}if(r){const e=l*i.params.grid.rows;l=i.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else l=i.getSlideIndexByData(l)}return requestAnimationFrame((()=>{i.slideTo(l,t,s,a)})),i},slideNext:function(e,t,s){void 0===t&&(t=!0);const a=this,{enabled:i,params:r,animating:l}=a;if(!i||a.destroyed)return a;void 0===e&&(e=a.params.speed);let n=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(n=Math.max(a.slidesPerViewDynamic("current",!0),1));const o=a.activeIndex<r.slidesPerGroupSkip?1:n,d=a.virtual&&r.virtual.enabled;if(r.loop){if(l&&!d&&r.loopPreventsSliding)return!1;if(a.loopFix({direction:"next"}),a._clientLeft=a.wrapperEl.clientLeft,a.activeIndex===a.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{a.slideTo(a.activeIndex+o,e,t,s)})),!0}return r.rewind&&a.isEnd?a.slideTo(0,e,t,s):a.slideTo(a.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===t&&(t=!0);const a=this,{params:i,snapGrid:r,slidesGrid:l,rtlTranslate:n,enabled:o,animating:d}=a;if(!o||a.destroyed)return a;void 0===e&&(e=a.params.speed);const c=a.virtual&&i.virtual.enabled;if(i.loop){if(d&&!c&&i.loopPreventsSliding)return!1;a.loopFix({direction:"prev"}),a._clientLeft=a.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(n?a.translate:-a.translate),m=r.map((e=>p(e)));let h=r[m.indexOf(u)-1];if(void 0===h&&i.cssMode){let e;r.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(h=r[e>0?e-1:e])}let f=0;if(void 0!==h&&(f=l.indexOf(h),f<0&&(f=a.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(f=f-a.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),i.rewind&&a.isBeginning){const i=a.params.virtual&&a.params.virtual.enabled&&a.virtual?a.virtual.slides.length-1:a.slides.length-1;return a.slideTo(i,e,t,s)}return i.loop&&0===a.activeIndex&&i.cssMode?(requestAnimationFrame((()=>{a.slideTo(f,e,t,s)})),!0):a.slideTo(f,e,t,s)},slideReset:function(e,t,s){void 0===t&&(t=!0);const a=this;if(!a.destroyed)return void 0===e&&(e=a.params.speed),a.slideTo(a.activeIndex,e,t,s)},slideToClosest:function(e,t,s,a){void 0===t&&(t=!0),void 0===a&&(a=.5);const i=this;if(i.destroyed)return;void 0===e&&(e=i.params.speed);let r=i.activeIndex;const l=Math.min(i.params.slidesPerGroupSkip,r),n=l+Math.floor((r-l)/i.params.slidesPerGroup),o=i.rtlTranslate?i.translate:-i.translate;if(o>=i.snapGrid[n]){const e=i.snapGrid[n];o-e>(i.snapGrid[n+1]-e)*a&&(r+=i.params.slidesPerGroup)}else{const e=i.snapGrid[n-1];o-e<=(i.snapGrid[n]-e)*a&&(r-=i.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,i.slidesGrid.length-1),i.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:s}=e,a="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,l=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?l<e.loopedSlides-a/2||l>e.slides.length-e.loopedSlides+a/2?(e.loopFix(),l=e.getSlideIndex((0,i.e)(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),(0,i.n)((()=>{e.slideTo(l)}))):e.slideTo(l):l>e.slides.length-a?(e.loopFix(),l=e.getSlideIndex((0,i.e)(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),(0,i.n)((()=>{e.slideTo(l)}))):e.slideTo(l)}else e.slideTo(l)}},b={loopCreate:function(e){const t=this,{params:s,slidesEl:a}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{(0,i.e)(a,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},l=t.grid&&s.grid&&s.grid.rows>1,n=s.slidesPerGroup*(l?s.grid.rows:1),o=t.slides.length%n!=0,d=l&&t.slides.length%s.grid.rows!=0,c=e=>{for(let a=0;a<e;a+=1){const e=t.isElement?(0,i.c)("swiper-slide",[s.slideBlankClass]):(0,i.c)("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};o?(s.loopAddBlankSlides?(c(n-t.slides.length%n),t.recalcSlides(),t.updateSlides()):(0,i.u)("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),r()):d?(s.loopAddBlankSlides?(c(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()):(0,i.u)("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),r()):r(),t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:a,setTranslate:r,activeSlideIndex:l,byController:n,byMousewheel:o}=void 0===e?{}:e;const d=this;if(!d.params.loop)return;d.emit("beforeLoopFix");const{slides:c,allowSlidePrev:p,allowSlideNext:u,slidesEl:m,params:h}=d,{centeredSlides:f}=h;if(d.allowSlidePrev=!0,d.allowSlideNext=!0,d.virtual&&h.virtual.enabled)return s&&(h.centeredSlides||0!==d.snapIndex?h.centeredSlides&&d.snapIndex<h.slidesPerView?d.slideTo(d.virtual.slides.length+d.snapIndex,0,!1,!0):d.snapIndex===d.snapGrid.length-1&&d.slideTo(d.virtual.slidesBefore,0,!1,!0):d.slideTo(d.virtual.slides.length,0,!1,!0)),d.allowSlidePrev=p,d.allowSlideNext=u,void d.emit("loopFix");let g=h.slidesPerView;"auto"===g?g=d.slidesPerViewDynamic():(g=Math.ceil(parseFloat(h.slidesPerView,10)),f&&g%2==0&&(g+=1));const v=h.slidesPerGroupAuto?g:h.slidesPerGroup;let w=v;w%v!=0&&(w+=v-w%v),w+=h.loopAdditionalSlides,d.loopedSlides=w;const b=d.grid&&h.grid&&h.grid.rows>1;c.length<g+w?(0,i.u)("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===h.grid.fill&&(0,i.u)("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const y=[],E=[];let x=d.activeIndex;void 0===l?l=d.getSlideIndex(c.filter((e=>e.classList.contains(h.slideActiveClass)))[0]):x=l;const S="next"===a||!a,T="prev"===a||!a;let M=0,C=0;const P=b?Math.ceil(c.length/h.grid.rows):c.length,L=(b?c[l].column:l)+(f&&void 0===r?-g/2+.5:0);if(L<w){M=Math.max(w-L,v);for(let e=0;e<w-L;e+=1){const t=e-Math.floor(e/P)*P;if(b){const e=P-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&y.push(t)}else y.push(P-t-1)}}else if(L+g>P-w){C=Math.max(L-(P-2*w),v);for(let e=0;e<C;e+=1){const t=e-Math.floor(e/P)*P;b?c.forEach(((e,s)=>{e.column===t&&E.push(s)})):E.push(t)}}if(d.__preventObserver__=!0,requestAnimationFrame((()=>{d.__preventObserver__=!1})),T&&y.forEach((e=>{c[e].swiperLoopMoveDOM=!0,m.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),S&&E.forEach((e=>{c[e].swiperLoopMoveDOM=!0,m.append(c[e]),c[e].swiperLoopMoveDOM=!1})),d.recalcSlides(),"auto"===h.slidesPerView?d.updateSlides():b&&(y.length>0&&T||E.length>0&&S)&&d.slides.forEach(((e,t)=>{d.grid.updateSlide(t,e,d.slides)})),h.watchSlidesProgress&&d.updateSlidesOffset(),s)if(y.length>0&&T){if(void 0===t){const e=d.slidesGrid[x],t=d.slidesGrid[x+M]-e;o?d.setTranslate(d.translate-t):(d.slideTo(x+Math.ceil(M),0,!1,!0),r&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else if(r){const e=b?y.length/h.grid.rows:y.length;d.slideTo(d.activeIndex+e,0,!1,!0),d.touchEventsData.currentTranslate=d.translate}}else if(E.length>0&&S)if(void 0===t){const e=d.slidesGrid[x],t=d.slidesGrid[x-C]-e;o?d.setTranslate(d.translate-t):(d.slideTo(x-C,0,!1,!0),r&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else{const e=b?E.length/h.grid.rows:E.length;d.slideTo(d.activeIndex-e,0,!1,!0)}if(d.allowSlidePrev=p,d.allowSlideNext=u,d.controller&&d.controller.control&&!n){const e={slideRealIndex:t,direction:a,setTranslate:r,activeSlideIndex:l,byController:!0};Array.isArray(d.controller.control)?d.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&s})})):d.controller.control instanceof d.constructor&&d.controller.control.params.loop&&d.controller.control.loopFix({...e,slideTo:d.controller.control.params.slidesPerView===h.slidesPerView&&s})}d.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const a=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;a[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),a.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function y(e,t,s){const i=(0,a.a)(),{params:r}=e,l=r.edgeSwipeDetection,n=r.edgeSwipeThreshold;return!l||!(s<=n||s>=i.innerWidth-n)||"prevent"===l&&(t.preventDefault(),!0)}function E(e){const t=this,s=(0,a.g)();let r=e;r.originalEvent&&(r=r.originalEvent);const l=t.touchEventsData;if("pointerdown"===r.type){if(null!==l.pointerId&&l.pointerId!==r.pointerId)return;l.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(l.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void y(t,r,r.targetTouches[0].pageX);const{params:n,touches:o,enabled:d}=t;if(!d)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let c=r.target;if("wrapper"===n.touchEventsTarget&&!(0,i.v)(c,t.wrapperEl))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(l.isTouched&&l.isMoved)return;const p=!!n.noSwipingClass&&""!==n.noSwipingClass,u=r.composedPath?r.composedPath():r.path;p&&r.target&&r.target.shadowRoot&&u&&(c=u[0]);const m=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,h=!(!r.target||!r.target.shadowRoot);if(n.noSwiping&&(h?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===(0,a.g)()||s===(0,a.a)())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(m,c):c.closest(m)))return void(t.allowClick=!0);if(n.swipeHandler&&!c.closest(n.swipeHandler))return;o.currentX=r.pageX,o.currentY=r.pageY;const f=o.currentX,g=o.currentY;if(!y(t,r,f))return;Object.assign(l,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=f,o.startY=g,l.touchStartTime=(0,i.d)(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(l.allowThresholdMove=!1);let v=!0;c.matches(l.focusableElements)&&(v=!1,"SELECT"===c.nodeName&&(l.isTouched=!1)),s.activeElement&&s.activeElement.matches(l.focusableElements)&&s.activeElement!==c&&("mouse"===r.pointerType||"mouse"!==r.pointerType&&!c.matches(l.focusableElements))&&s.activeElement.blur();const w=v&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!w||c.isContentEditable||r.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",r)}function x(e){const t=(0,a.g)(),s=this,r=s.touchEventsData,{params:l,touches:n,rtlTranslate:o,enabled:d}=s;if(!d)return;if(!l.simulateTouch&&"mouse"===e.pointerType)return;let c,p=e;if(p.originalEvent&&(p=p.originalEvent),"pointermove"===p.type){if(null!==r.touchId)return;if(p.pointerId!==r.pointerId)return}if("touchmove"===p.type){if(c=[...p.changedTouches].filter((e=>e.identifier===r.touchId))[0],!c||c.identifier!==r.touchId)return}else c=p;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&s.emit("touchMoveOpposite",p));const u=c.pageX,m=c.pageY;if(p.preventedByNestedSwiper)return n.startX=u,void(n.startY=m);if(!s.allowTouchMove)return p.target.matches(r.focusableElements)||(s.allowClick=!1),void(r.isTouched&&(Object.assign(n,{startX:u,startY:m,currentX:u,currentY:m}),r.touchStartTime=(0,i.d)()));if(l.touchReleaseOnEdges&&!l.loop)if(s.isVertical()){if(m<n.startY&&s.translate<=s.maxTranslate()||m>n.startY&&s.translate>=s.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(u<n.startX&&s.translate<=s.maxTranslate()||u>n.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&t.activeElement.matches(r.focusableElements)&&t.activeElement!==p.target&&"mouse"!==p.pointerType&&t.activeElement.blur(),t.activeElement&&p.target===t.activeElement&&p.target.matches(r.focusableElements))return r.isMoved=!0,void(s.allowClick=!1);r.allowTouchCallbacks&&s.emit("touchMove",p),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=u,n.currentY=m;const h=n.currentX-n.startX,f=n.currentY-n.startY;if(s.params.threshold&&Math.sqrt(h**2+f**2)<s.params.threshold)return;if(void 0===r.isScrolling){let e;s.isHorizontal()&&n.currentY===n.startY||s.isVertical()&&n.currentX===n.startX?r.isScrolling=!1:h*h+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,r.isScrolling=s.isHorizontal()?e>l.touchAngle:90-e>l.touchAngle)}if(r.isScrolling&&s.emit("touchMoveOpposite",p),void 0===r.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===p.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;s.allowClick=!1,!l.cssMode&&p.cancelable&&p.preventDefault(),l.touchMoveStopPropagation&&!l.nested&&p.stopPropagation();let g=s.isHorizontal()?h:f,v=s.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;l.oneWayMovement&&(g=Math.abs(g)*(o?1:-1),v=Math.abs(v)*(o?1:-1)),n.diff=g,g*=l.touchRatio,o&&(g=-g,v=-v);const w=s.touchesDirection;s.swipeDirection=g>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const b=s.params.loop&&!l.cssMode,y="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!r.isMoved){if(b&&y&&s.loopFix({direction:s.swipeDirection}),r.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});s.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!l.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",p)}if((new Date).getTime(),r.isMoved&&r.allowThresholdMove&&w!==s.touchesDirection&&b&&y&&Math.abs(g)>=1)return Object.assign(n,{startX:u,startY:m,currentX:u,currentY:m,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);s.emit("sliderMove",p),r.isMoved=!0,r.currentTranslate=g+r.startTranslate;let E=!0,x=l.resistanceRatio;if(l.touchReleaseOnEdges&&(x=0),g>0?(b&&y&&r.allowThresholdMove&&r.currentTranslate>(l.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]-("auto"!==l.slidesPerView&&s.slides.length-l.slidesPerView>=2?s.slidesSizesGrid[s.activeIndex+1]+s.params.spaceBetween:0)-s.params.spaceBetween:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>s.minTranslate()&&(E=!1,l.resistance&&(r.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+r.startTranslate+g)**x))):g<0&&(b&&y&&r.allowThresholdMove&&r.currentTranslate<(l.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween+("auto"!==l.slidesPerView&&s.slides.length-l.slidesPerView>=2?s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween:0):s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===l.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(l.slidesPerView,10)))}),r.currentTranslate<s.maxTranslate()&&(E=!1,l.resistance&&(r.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-r.startTranslate-g)**x))),E&&(p.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),s.allowSlidePrev||s.allowSlideNext||(r.currentTranslate=r.startTranslate),l.threshold>0){if(!(Math.abs(g)>l.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,r.currentTranslate=r.startTranslate,void(n.diff=s.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}l.followFinger&&!l.cssMode&&((l.freeMode&&l.freeMode.enabled&&s.freeMode||l.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),l.freeMode&&l.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(r.currentTranslate),s.setTranslate(r.currentTranslate))}function S(e){const t=this,s=t.touchEventsData;let a,r=e;if(r.originalEvent&&(r=r.originalEvent),"touchend"===r.type||"touchcancel"===r.type){if(a=[...r.changedTouches].filter((e=>e.identifier===s.touchId))[0],!a||a.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(r.pointerId!==s.pointerId)return;a=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&(!["pointercancel","contextmenu"].includes(r.type)||!t.browser.isSafari&&!t.browser.isWebView))return;s.pointerId=null,s.touchId=null;const{params:l,touches:n,rtlTranslate:o,slidesGrid:d,enabled:c}=t;if(!c)return;if(!l.simulateTouch&&"mouse"===r.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",r),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&l.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);l.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=(0,i.d)(),u=p-s.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),u<300&&p-s.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(s.lastClickTime=(0,i.d)(),(0,i.n)((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===n.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let m;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,m=l.followFinger?o?t.translate:-t.translate:-s.currentTranslate,l.cssMode)return;if(l.freeMode&&l.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:m});const h=m>=-t.maxTranslate()&&!t.params.loop;let f=0,g=t.slidesSizesGrid[0];for(let e=0;e<d.length;e+=e<l.slidesPerGroupSkip?1:l.slidesPerGroup){const t=e<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;void 0!==d[e+t]?(h||m>=d[e]&&m<d[e+t])&&(f=e,g=d[e+t]-d[e]):(h||m>=d[e])&&(f=e,g=d[d.length-1]-d[d.length-2])}let v=null,w=null;l.rewind&&(t.isBeginning?w=l.virtual&&l.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(v=0));const b=(m-d[f])/g,y=f<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;if(u>l.longSwipesMs){if(!l.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=l.longSwipesRatio?t.slideTo(l.rewind&&t.isEnd?v:f+y):t.slideTo(f)),"prev"===t.swipeDirection&&(b>1-l.longSwipesRatio?t.slideTo(f+y):null!==w&&b<0&&Math.abs(b)>l.longSwipesRatio?t.slideTo(w):t.slideTo(f))}else{if(!l.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||r.target!==t.navigation.nextEl&&r.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==v?v:f+y),"prev"===t.swipeDirection&&t.slideTo(null!==w?w:f)):r.target===t.navigation.nextEl?t.slideTo(f+y):t.slideTo(f)}}function T(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:a,allowSlidePrev:i,snapGrid:r}=e,l=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const n=l&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||n?e.params.loop&&!l?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=a,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function M(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function C(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:a}=e;if(!a)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();i=0===r?0:(e.translate-e.minTranslate())/r,i!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function P(e){const t=this;m(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function L(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const I=(e,t)=>{const s=(0,a.g)(),{params:i,el:r,wrapperEl:l,device:n}=e,o=!!i.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;r&&"string"!=typeof r&&(s[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),r[d]("touchstart",e.onTouchStart,{passive:!1}),r[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("touchmove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("touchend",e.onTouchEnd,{passive:!0}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("touchcancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&r[d]("click",e.onClick,!0),i.cssMode&&l[d]("scroll",e.onScroll),i.updateOnWindowResize?e[c](n.ios||n.android?"resize orientationchange observerUpdate":"resize observerUpdate",T,!0):e[c]("observerUpdate",T,!0),r[d]("load",e.onLoad,{capture:!0}))},z=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var A={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function k(e,t){return function(s){void 0===s&&(s={});const a=Object.keys(s)[0],r=s[a];"object"==typeof r&&null!==r?(!0===e[a]&&(e[a]={enabled:!0}),"navigation"===a&&e[a]&&e[a].enabled&&!e[a].prevEl&&!e[a].nextEl&&(e[a].auto=!0),["pagination","scrollbar"].indexOf(a)>=0&&e[a]&&e[a].enabled&&!e[a].el&&(e[a].auto=!0),a in e&&"enabled"in r?("object"!=typeof e[a]||"enabled"in e[a]||(e[a].enabled=!0),e[a]||(e[a]={enabled:!1}),(0,i.w)(t,s)):(0,i.w)(t,s)):(0,i.w)(t,s)}}const $={eventsEmitter:c,update:g,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:a,wrapperEl:r}=this;if(t.virtualTranslate)return s?-a:a;if(t.cssMode)return a;let l=(0,i.j)(r,e);return l+=this.cssOverflowAdjustment(),s&&(l=-l),l||0},setTranslate:function(e,t){const s=this,{rtlTranslate:a,params:i,wrapperEl:r,progress:l}=s;let n,o=0,d=0;s.isHorizontal()?o=a?-e:e:d=e,i.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,i.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:i.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();n=0===c?0:(e-s.minTranslate())/c,n!==l&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,a,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===a&&(a=!0);const l=this,{params:n,wrapperEl:o}=l;if(l.animating&&n.preventInteractionOnTransition)return!1;const d=l.minTranslate(),c=l.maxTranslate();let p;if(p=a&&e>d?d:a&&e<c?c:e,l.updateProgress(p),n.cssMode){const e=l.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-p;else{if(!l.support.smoothScroll)return(0,i.t)({swiper:l,targetPosition:-p,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-p,behavior:"smooth"})}return!0}return 0===t?(l.setTransition(0),l.setTranslate(p),s&&(l.emit("beforeTransitionStart",t,r),l.emit("transitionEnd"))):(l.setTransition(t),l.setTranslate(p),s&&(l.emit("beforeTransitionStart",t,r),l.emit("transitionStart")),l.animating||(l.animating=!0,l.onTranslateToWrapperTransitionEnd||(l.onTranslateToWrapperTransitionEnd=function(e){l&&!l.destroyed&&e.target===this&&(l.wrapperEl.removeEventListener("transitionend",l.onTranslateToWrapperTransitionEnd),l.onTranslateToWrapperTransitionEnd=null,delete l.onTranslateToWrapperTransitionEnd,l.animating=!1,s&&l.emit("transitionEnd"))}),l.wrapperEl.addEventListener("transitionend",l.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:a}=s;a.cssMode||(a.autoHeight&&s.updateAutoHeight(),v({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:a}=s;s.animating=!1,a.cssMode||(s.setTransition(0),v({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:w,loop:b,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=E.bind(e),e.onTouchMove=x.bind(e),e.onTouchEnd=S.bind(e),e.onDocumentTouchStart=L.bind(e),t.cssMode&&(e.onScroll=C.bind(e)),e.onClick=M.bind(e),e.onLoad=P.bind(e),I(e,"on")},detachEvents:function(){I(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:a,el:r}=e,l=a.breakpoints;if(!l||l&&0===Object.keys(l).length)return;const n=e.getBreakpoint(l,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const o=(n in l?l[n]:void 0)||e.originalParams,d=z(e,a),c=z(e,o),p=e.params.grabCursor,u=o.grabCursor,m=a.enabled;d&&!c?(r.classList.remove(`${a.containerModifierClass}grid`,`${a.containerModifierClass}grid-column`),e.emitContainerClasses()):!d&&c&&(r.classList.add(`${a.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===a.grid.fill)&&r.classList.add(`${a.containerModifierClass}grid-column`),e.emitContainerClasses()),p&&!u?e.unsetGrabCursor():!p&&u&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const s=a[t]&&a[t].enabled,i=o[t]&&o[t].enabled;s&&!i&&e[t].disable(),!s&&i&&e[t].enable()}));const h=o.direction&&o.direction!==a.direction,f=a.loop&&(o.slidesPerView!==a.slidesPerView||h),g=a.loop;h&&s&&e.changeDirection(),(0,i.w)(e.params,o);const v=e.params.enabled,w=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),m&&!v?e.disable():!m&&v&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",o),s&&(f?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!g&&w?(e.loopCreate(t),e.updateSlides()):g&&!w&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const r=(0,a.a)(),l="window"===t?r.innerHeight:s.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:l*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:a,value:l}=n[e];"window"===t?r.matchMedia(`(min-width: ${l}px)`).matches&&(i=a):l<=s.clientWidth&&(i=a)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:a}=s;if(a){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*a;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:a,el:i,device:r}=e,l=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((a=>{e[a]&&s.push(t+a)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:a},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...l),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},O={};class _{constructor(){let e,t;for(var s=arguments.length,r=new Array(s),l=0;l<s;l++)r[l]=arguments[l];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?t=r[0]:[e,t]=r,t||(t={}),t=(0,i.w)({},t),e&&!t.el&&(t.el=e);const c=(0,a.g)();if(t.el&&"string"==typeof t.el&&c.querySelectorAll(t.el).length>1){const e=[];return c.querySelectorAll(t.el).forEach((s=>{const a=(0,i.w)({},t,{el:s});e.push(new _(a))})),e}const p=this;p.__swiper__=!0,p.support=o(),p.device=d({userAgent:t.userAgent}),p.browser=(n||(n=function(){const e=(0,a.a)(),t=d();let s=!1;function i(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(i()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,a]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));s=e<16||16===e&&a<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),l=i();return{isSafari:s||l,needPerspectiveFix:s,need3dFix:l||r&&t.ios,isWebView:r}}()),n),p.eventsListeners={},p.eventsAnyListeners=[],p.modules=[...p.__modules__],t.modules&&Array.isArray(t.modules)&&p.modules.push(...t.modules);const u={};p.modules.forEach((e=>{e({params:t,swiper:p,extendParams:k(t,u),on:p.on.bind(p),once:p.once.bind(p),off:p.off.bind(p),emit:p.emit.bind(p)})}));const m=(0,i.w)({},A,u);return p.params=(0,i.w)({},m,O,t),p.originalParams=(0,i.w)({},p.params),p.passedParams=(0,i.w)({},t),p.params&&p.params.on&&Object.keys(p.params.on).forEach((e=>{p.on(e,p.params.on[e])})),p.params&&p.params.onAny&&p.onAny(p.params.onAny),Object.assign(p,{enabled:p.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===p.params.direction,isVertical:()=>"vertical"===p.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:p.params.allowSlideNext,allowSlidePrev:p.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:p.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:p.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),p.emit("_swiper"),p.params.init&&p.init(),p}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,a=(0,i.e)(t,`.${s.slideClass}, swiper-slide`),r=(0,i.h)(a[0]);return(0,i.h)(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=(0,i.e)(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const a=s.minTranslate(),i=(s.maxTranslate()-a)*e+a;s.translateTo(i,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const a=e.getSlideClasses(s);t.push({slideEl:s,classNames:a}),e.emit("_slideClass",s,a)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:a,slidesGrid:i,slidesSizesGrid:r,size:l,activeIndex:n}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=a[n]?Math.ceil(a[n].swiperSlideSize):0;for(let s=n+1;s<a.length;s+=1)a[s]&&!e&&(t+=Math.ceil(a[s].swiperSlideSize),o+=1,t>l&&(e=!0));for(let s=n-1;s>=0;s-=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>l&&(e=!0))}else if("current"===e)for(let e=n+1;e<a.length;e+=1)(t?i[e]+r[e]-i[n]<l:i[e]-i[n]<l)&&(o+=1);else for(let e=n-1;e>=0;e-=1)i[n]-i[e]<l&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function a(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&m(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)a(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(t.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||a()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,a=s.params.direction;return e||(e="horizontal"===a?"vertical":"horizontal"),e===a||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${a}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const a=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(a()):(0,i.e)(s,a())[0];return!r&&t.params.createElements&&(r=(0,i.c)("div",t.params.wrapperClass),s.append(r),(0,i.e)(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:r,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===(0,i.p)(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===(0,i.p)(s,"direction")),wrongRTL:"-webkit-box"===(0,i.p)(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?m(t,e):e.addEventListener("load",(e=>{m(t,e.target)}))})),f(t),t.initialized=!0,f(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:a,el:r,wrapperEl:l,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),a.loop&&s.loopDestroy(),t&&(s.removeClasses(),r&&"string"!=typeof r&&r.removeAttribute("style"),l&&l.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(a.slideVisibleClass,a.slideFullyVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el&&"string"!=typeof s.el&&(s.el.swiper=null),(0,i.x)(s)),s.destroyed=!0),null}static extendDefaults(e){(0,i.w)(O,e)}static get extendedDefaults(){return O}static get defaults(){return A}static installModule(e){_.prototype.__modules__||(_.prototype.__modules__=[]);const t=_.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>_.installModule(e))),_):(_.installModule(e),_)}}Object.keys($).forEach((e=>{Object.keys($[e]).forEach((t=>{_.prototype[t]=$[e][t]}))})),_.use([function(e){let{swiper:t,on:s,emit:i}=e;const r=(0,a.a)();let l=null,n=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(l=new ResizeObserver((e=>{n=r.requestAnimationFrame((()=>{const{width:s,height:a}=t;let i=s,r=a;e.forEach((e=>{let{contentBoxSize:s,contentRect:a,target:l}=e;l&&l!==t.el||(i=a?a.width:(s[0]||s).inlineSize,r=a?a.height:(s[0]||s).blockSize)})),i===s&&r===a||o()}))})),l.observe(t.el)):(r.addEventListener("resize",o),r.addEventListener("orientationchange",d))})),s("destroy",(()=>{n&&r.cancelAnimationFrame(n),l&&l.unobserve&&t.el&&(l.unobserve(t.el),l=null),r.removeEventListener("resize",o),r.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:s,on:r,emit:l}=e;const n=[],o=(0,a.a)(),d=function(e,s){void 0===s&&(s={});const a=new(o.MutationObserver||o.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void l("observerUpdate",e[0]);const s=function(){l("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(s):o.setTimeout(s,0)}));a.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:t.isElement||(void 0===s.childList||s).childList,characterData:void 0===s.characterData||s.characterData}),n.push(a)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=(0,i.a)(t.hostEl);for(let t=0;t<e.length;t+=1)d(e[t])}d(t.hostEl,{childList:t.params.observeSlideChildren}),d(t.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}])},"./node_modules/swiper/shared/utils.mjs":(e,t,s)=>{s.r(t),s.d(t,{a:()=>S,b:()=>w,c:()=>v,d:()=>n,e:()=>h,f:()=>M,g:()=>m,h:()=>x,i:()=>i,j:()=>o,k:()=>T,l:()=>d,m:()=>C,n:()=>l,o:()=>P,p:()=>E,q:()=>y,r:()=>b,s:()=>p,t:()=>u,u:()=>g,v:()=>f,w:()=>c,x:()=>r});var a=s("./node_modules/swiper/shared/ssr-window.esm.mjs");function i(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}function r(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}function l(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function n(){return Date.now()}function o(e,t){void 0===t&&(t="x");const s=(0,a.a)();let i,r,l;const n=function(e){const t=(0,a.a)();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=n.transform||n.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),l=new s.WebKitCSSMatrix("none"===r?"":r)):(l=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=l.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?l.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=s.WebKitCSSMatrix?l.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}function d(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function c(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let a=1;a<arguments.length;a+=1){const i=a<0||arguments.length<=a?void 0:arguments[a];if(null!=i&&(s=i,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(i)).filter((e=>t.indexOf(e)<0));for(let t=0,a=s.length;t<a;t+=1){const a=s[t],r=Object.getOwnPropertyDescriptor(i,a);void 0!==r&&r.enumerable&&(d(e[a])&&d(i[a])?i[a].__swiper__?e[a]=i[a]:c(e[a],i[a]):!d(e[a])&&d(i[a])?(e[a]={},i[a].__swiper__?e[a]=i[a]:c(e[a],i[a])):e[a]=i[a])}}}var s;return e}function p(e,t,s){e.style.setProperty(t,s)}function u(e){let{swiper:t,targetPosition:s,side:i}=e;const r=(0,a.a)(),l=-t.translate;let n,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const c=s>l?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{n=(new Date).getTime(),null===o&&(o=n);const e=Math.max(Math.min((n-o)/d,1),0),a=.5-Math.cos(e*Math.PI)/2;let c=l+a*(s-l);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[i]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:c})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function m(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function h(e,t){void 0===t&&(t="");const s=[...e.children];return e instanceof HTMLSlotElement&&s.push(...e.assignedElements()),t?s.filter((e=>e.matches(t))):s}function f(e,t){const s=t.contains(e);return!s&&t instanceof HTMLSlotElement?[...t.assignedElements()].includes(e):s}function g(e){try{return void console.warn(e)}catch(e){}}function v(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:i(t)),s}function w(e){const t=(0,a.a)(),s=(0,a.g)(),i=e.getBoundingClientRect(),r=s.body,l=e.clientTop||r.clientTop||0,n=e.clientLeft||r.clientLeft||0,o=e===t?t.scrollY:e.scrollTop,d=e===t?t.scrollX:e.scrollLeft;return{top:i.top+o-l,left:i.left+d-n}}function b(e,t){const s=[];for(;e.previousElementSibling;){const a=e.previousElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}function y(e,t){const s=[];for(;e.nextElementSibling;){const a=e.nextElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}function E(e,t){return(0,a.a)().getComputedStyle(e,null).getPropertyValue(t)}function x(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function S(e,t){const s=[];let a=e.parentElement;for(;a;)t?a.matches(t)&&s.push(a):s.push(a),a=a.parentElement;return s}function T(e,t){t&&e.addEventListener("transitionend",(function s(a){a.target===e&&(t.call(e,a),e.removeEventListener("transitionend",s))}))}function M(e,t,s){const i=(0,a.a)();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function C(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}function P(e){return t=>Math.abs(t)>0&&e.browser&&e.browser.need3dFix&&Math.abs(t)%90==0?t+.001:t}},"./node_modules/swiper/swiper.mjs":(e,t,s)=>{s.r(t),s.d(t,{Swiper:()=>a.S,default:()=>a.S});var a=s("./node_modules/swiper/shared/swiper-core.mjs")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,